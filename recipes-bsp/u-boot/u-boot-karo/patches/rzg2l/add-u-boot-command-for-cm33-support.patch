From 016feb048cfe9de6a53de06706335344777f36e6 Mon Sep 17 00:00:00 2001
From: Uwe Steinkohl <us@karo-electronics.de>
Date: Fri, 9 Sep 2022 12:28:36 +0200
Subject: [PATCH] add u-boot command for cm33 support

---
 cmd/Kconfig  |   9 ++++
 cmd/Makefile |   1 +
 cmd/cm33.c   | 131 +++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 141 insertions(+)
 create mode 100755 cmd/cm33.c

Index: u-boot-qsrz-g2l0/cmd/Kconfig
===================================================================
--- u-boot-qsrz-g2l0.orig/cmd/Kconfig
+++ u-boot-qsrz-g2l0/cmd/Kconfig
@@ -210,6 +210,13 @@ config CMD_BDI
 	help
 	  Print board info
 
+config CMD_CM33
+	bool "RZ/G2L CM33 commands"
+	depends on RCAR_GEN3
+	depends on CMDLINE
+	help
+	  Commands used to enable and control the embedded CM33 in the RZ/G2L.
+
 config CMD_CONFIG
 	bool "config"
 	default SANDBOX
Index: u-boot-qsrz-g2l0/cmd/Makefile
===================================================================
--- u-boot-qsrz-g2l0.orig/cmd/Makefile
+++ u-boot-qsrz-g2l0/cmd/Makefile
@@ -38,6 +38,7 @@ obj-$(CONFIG_CMD_CACHE) += cache.o
 obj-$(CONFIG_CMD_CBFS) += cbfs.o
 obj-$(CONFIG_CMD_CLK) += clk.o
 obj-$(CONFIG_CMD_CLS) += cls.o
+obj-$(CONFIG_CMD_CM33) += cm33.o
 obj-$(CONFIG_CMD_CONFIG) += config.o
 obj-$(CONFIG_CMD_CONITRACE) += conitrace.o
 obj-$(CONFIG_CMD_CONSOLE) += console.o
Index: u-boot-qsrz-g2l0/cmd/cm33.c
===================================================================
--- /dev/null
+++ u-boot-qsrz-g2l0/cmd/cm33.c
@@ -0,0 +1,151 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * (C) Copyright 2023 Uwe Steinkohl <us@karo-electronics.de>
+ * reworked by: Lothar Wa√ümann <LW@KARO-electronics.de>
+ */
+
+#include <common.h>
+#include <command.h>
+#include <linux/iopoll.h>
+
+#define CPG_BASE_ADDR		0x11010000UL
+#define SYS_CM33_BASE_ADDR	0x11020000UL
+
+#define CPG_SIPLL3_MON	0x13C	// PLL3 (SSCG) Monitor Register
+#define CPG_CLKON_CM33	0x504	// Clock Control Register Cortex-M33
+#define CPG_CLKMON_CM33	0x684	// Clock Monitor Register Cortex-M33
+#define CPG_RST_CM33	0x804	// Reset Control Register Cortex-M33
+#define CPG_RSTMON_CM33	0x984	// Reset Monitor Register Cortex-M33
+
+#define SYS_CM33_CFG0	0x804	// CM33 Config Register0
+#define SYS_CM33_CFG1	0x808	// CM33 Config Register1
+#define SYS_CM33_CFG2	0x80C	// CM33 Config Register2
+#define SYS_CM33_CFG3	0x810	// CM33 Config Register3
+#define SYS_CM33_CTL	0x818	// CM33 Control Register
+#define SYS_LSI_MODE	0xA00	// LSI Mode Signal Register
+#define SYS_LP_CM33CTL1	0xD28	// Lowpower Sequence CM33 Control Register1
+
+static void *cpg_base = (void *)CPG_BASE_ADDR;
+static void *sysc_base = (void *)SYS_CM33_BASE_ADDR;
+
+static int cm33_boot_normal_mode(void)
+{
+	int ret;
+	u32 val;
+
+	// Supply clock to CM33_CLKIN
+	writel(0x00010001, cpg_base + CPG_CLKON_CM33);
+
+	// Poll CPG_CLKMON_CM33 to confirm that CM33_CLKIN clock is supplied
+	ret = readl_poll_timeout(cpg_base + CPG_CLKMON_CM33, val, val & 0x1, 1000);
+	if (ret) {
+		printf("Timeout waiting for CM33_CLKIN\n");
+		return ret;
+	}
+
+	// Stop the reset signals (released from the reset state)
+	writel(0x00070007, cpg_base + CPG_RST_CM33);
+
+	// Poll CPG_RSTMON_CM33 to confirm that all the reset signals are not applied
+	ret = readl_poll_timeout(cpg_base + CPG_RSTMON_CM33, val, !val, 1000);
+	if (ret) {
+		printf("Timeout waiting for CM33 RESET deassertion\n");
+		return ret;
+	}
+	return 0;
+}
+
+static int cm33_boot_debug_mode(void)
+{
+	int ret;
+	u32 val;
+
+	// Supply clock to CM33_TSCLK and CM33_CLKIN
+	writel(0x00030003, cpg_base + CPG_CLKON_CM33);
+
+	// Poll CPG_CLKMON_CM33 to confirm that both CM33_TSCLK and CM33_CLKIN clock are supplied
+	ret = readl_poll_timeout(cpg_base + CPG_CLKMON_CM33, val, val == 0x3, 1000);
+	if (ret) {
+		printf("Timeout waiting for CM33_CLKIN\n");
+		return ret;
+	}
+
+	// Set DEBUGQREQn bit of SYS_LP_CM33CTL1 to 1
+	writel(0x00001100, sysc_base + SYS_LP_CM33CTL1);
+
+	// Poll SYS_LP_CM33CTL1 to check if DEBUGQACCEPTn bit becomes 1
+	// Fixme. Lacking of SYS_LP_CM33CTL1.DEBUGQACCEPTn info
+
+	// Set FETCHCNT bit of SYS_CM33_CTL register to 1
+	writel(0x00000001, sysc_base + SYS_CM33_CTL);
+
+	// Stop the reset signals (released from the reset state)
+	writel(0x00070007, cpg_base + CPG_RST_CM33);
+
+	// Poll CPG_RSTMON_CM33 to confirm that all the reset signals are not applied
+	ret = readl_poll_timeout(cpg_base + CPG_RSTMON_CM33, val, !val, 1000);
+	if (ret) {
+		printf("Timeout waiting for CM33 RESET deassertion\n");
+		return ret;
+	}
+
+	// Set FETCHCNT bit of SYS_CM33_CTL register to 0
+	writel(0x00000000, sysc_base + SYS_CM33_CTL);
+	return 0;
+}
+
+static int cm33_start(u8 debug, u32 s_addr, u32 ns_addr)
+{
+	// Check if the SSCG PLL3 is ON or not
+	if (readl(cpg_base + CPG_SIPLL3_MON) & 0x1) {
+		writel(0x00103CE5, sysc_base + SYS_CM33_CFG0);
+		writel(0x00103CE5, sysc_base + SYS_CM33_CFG1);
+	} else {
+		writel(0x00003D08, sysc_base + SYS_CM33_CFG0);
+		writel(0x00003D08, sysc_base + SYS_CM33_CFG1);
+	}
+
+	// Set the secure vector address of Cortex-M33
+	writel(s_addr, sysc_base + SYS_CM33_CFG2);
+
+	// Set the non secure vector address of Cortex-M33
+	writel(ns_addr, sysc_base + SYS_CM33_CFG3);
+
+	// Start the CM33 propram in normal/debug mode
+	return debug ? cm33_boot_debug_mode() : cm33_boot_normal_mode();
+}
+
+int do_cm33(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[])
+{
+	u32 s_addr, ns_addr;
+
+	/* need at least three arguments */
+	if (argc < 4)
+		return CMD_RET_USAGE;
+
+	s_addr = simple_strtoul(argv[2], NULL, 16);
+	ns_addr = simple_strtoul(argv[3], NULL, 16);
+
+	if (strcmp(argv[1], "start_normal") == 0) {
+		if (cm33_start(0, s_addr, ns_addr))
+			return CMD_RET_FAILURE;
+	} else if (strcmp(argv[1], "start_debug") == 0) {
+		if (cm33_start(1, s_addr, ns_addr))
+			return CMD_RET_FAILURE;
+	} else {
+		return CMD_RET_USAGE;
+	}
+
+	return CMD_RET_SUCCESS;
+}
+
+static char cm33_help_text[] =
+	"\n\tstart_normal <s_addr> <ns_addr> - Reset and start CM33 in normal mode with firmware\n"
+	"\t\t\tlocated at address <s_addr> (secure) and <ns_addr> (non secure)\n"
+	"\tstart_debug <s_addr> <ns_addr> - Reset and start CM33 in debug mode with firmware\n"
+	"\t\t\tlocated at address <s_addr> (secure) and <ns_addr> (non secure)\n"
+	"";
+
+U_BOOT_CMD(cm33, CONFIG_SYS_MAXARGS, 1, do_cm33,
+	   "Control CM33 CPU", cm33_help_text
+);
