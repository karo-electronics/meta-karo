// SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-3-Clause)
/*
 * Based on STM32CubeMX tool generated source.
 *
 * Copyright (C) 2024 Markus Bauer <MB@KARO-electronics.de>
 */

/dts-v1/;

#include <dt-bindings/pinctrl/stm32-pinfunc.h>
#include <dt-bindings/gpio/gpio.h>

#include "stm32mp135.dtsi"
#include "stm32mp13xc.dtsi"

/ {
	model = "Ka-Ro electronics GmbH QSMP-1351 solder-in module";
	compatible = "st,stm32mp135c-qsmp-1351", "st,stm32mp135";

	aliases {
		serial0 = &uart4;
		mmc0 = &sdmmc2;
		mmc1 = &sdmmc1;
		usb0 = &usbotg_hs;
	};

	chosen {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;
		stdout-path = "serial0:115200n8";
	};

	leds {
		compatible = "gpio-leds";

		module_led: module-led {
			gpios = <&gpioa 13 GPIO_ACTIVE_LOW>;
			label = "Heartbeat";
			default-state = "on";
			linux,default-trigger = "heartbeat";
		};
	};

	memory@c0000000 {
		device_type = "memory";
		reg = <0xc0000000 0x10000000>;
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		optee@ce000000{
			reg = <0xce000000 0x2000000>;
			no-map;
		};
	};
};

&bsec {
	status = "okay";

	board_id: board_id@ec {
		reg = <0xec 0x4>;
		st,non-secure-otp;
	};
};

&i2c1 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c1_pins>;
	pinctrl-1 = <&i2c1_sleep_pins>;
	status = "okay";
};

&i2c4 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c4_pins>;
	pinctrl-1 = <&i2c4_sleep_pins>;
	status = "okay";
};

&i2c5 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c5_pins>;
	pinctrl-1 = <&i2c5_sleep_pins>;
	status = "okay";
};

&ltdc {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ltdc_pins>;
	pinctrl-1 = <&ltdc_sleep_pins>;
	status = "okay";
};

&rtc {
	status = "okay";
};

&sdmmc1 {
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc1_pins>;
	pinctrl-1 = <&sdmmc1_opendrain_pins>;
	pinctrl-2 = <&sdmmc1_sleep_pins>;
	st,neg-edge;
	bus-width = <4>;
	vmmc-supply = <&scmi_vddcore>;
	vqmmc-supply = <&scmi_vddcore>;
	status = "okay";
};

&sdmmc2 {
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc2_pins>;
	pinctrl-1 = <&sdmmc2_opendrain_pins>;
	pinctrl-2 = <&sdmmc2_sleep_pins>;
	non-removable;
	no-sd;
	no-sdio;
	st,neg-edge;
	bus-width = <8>;
	vmmc-supply = <&scmi_vddcore>;
	vqmmc-supply = <&scmi_vddcore>;
	mmc-ddr-3_3v;
	status = "okay";
};

&uart4 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart4_pins>;
	pinctrl-1 = <&uart4_sleep_pins>;
	status = "okay";
};

&uart8 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart8_pins>;
	pinctrl-1 = <&uart8_sleep_pins>;
	status = "okay";
};

&usart1 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&usart1_pins>;
	pinctrl-1 = <&usart1_sleep_pins>;
	status = "okay";
};

&usart2 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&usart2_pins>;
	pinctrl-1 = <&usart2_sleep_pins>;
	status = "okay";
};

&usart3 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&usart3_pins>;
	pinctrl-1 = <&usart3_sleep_pins>;
	status = "okay";
};

&usbh_ehci {
	status = "okay";
};

&usbh_ohci {
	status = "okay";
};

&usbotg_hs {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&usb_otg_hs_pins>;
	pinctrl-1 = <&usb_otg_hs_sleep_pins>;
	phys = <&usbphyc_port1 0>;
	phy-names = "usb2-phy";
	dr_mode = "peripheral";
	status = "okay";
};

&usbphyc {
	status = "okay";
};

&usbphyc_port0 {
	phy-supply = <&scmi_vddcore>;
	status = "okay";
};

&usbphyc_port1 {
	phy-supply = <&scmi_vddcore>;
	status = "okay";
};

&scmi_regu {
	scmi_vddcpu: voltd-vddcpu {
		reg = <VOLTD_SCMI_REGU0>;
		regulator-name = "vddcpu";
	};

	scmi_vddcore: voltd-vddcore {
		reg = <VOLTD_SCMI_REGU1>;
		regulator-name = "vdd";
	};
};

&pinctrl {
	i2c1_pins: i2c1-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('D', 12, AF5) /* I2C1_SCL */
				  STM32_PINMUX('E', 8, AF5)  /* I2C1_SDA */
			>;
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c1_sleep_pins: i2c1_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('D', 12, ANALOG) /* I2C1_SCL */
				  STM32_PINMUX('E', 8, ANALOG)  /* I2C1_SDA */
			>;
		};
	};

	i2c4_pins: i2c4-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('B', 7, AF6) /* I2C4_SDA */
				  STM32_PINMUX('E', 2, AF4) /* I2C4_SCL */
			>;
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c4_sleep_pins: i2c4_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('B', 7, ANALOG) /* I2C4_SDA */
				  STM32_PINMUX('E', 2, ANALOG) /* I2C4_SCL */
			>;
		};
	};

	i2c5_pins: i2c5-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('D', 1, AF4)  /* I2C5_SCL */
				  STM32_PINMUX('E', 13, AF4) /* I2C5_SDA */
			>;
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c5_sleep_pins: i2c5_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('D', 1, ANALOG)  /* I2C5_SCL */
				  STM32_PINMUX('E', 13, ANALOG) /* I2C5_SDA */
			>;
		};
	};

	ltdc_pins: ltdc-0 {
		pins1 {
			pinmux = <
				  STM32_PINMUX('A', 9, AF14)	/* LTDC_R6 */
				  STM32_PINMUX('A', 15, AF11)	/* LTDC_G7 */
				  STM32_PINMUX('B', 5, AF14)	/* LTDC_DE */
				  STM32_PINMUX('B', 6, AF7)	/* LTDC_B6 */
				  STM32_PINMUX('B', 10, AF14)	/* LTDC_R3 */
				  STM32_PINMUX('B', 12, AF14)	/* LTDC_VSYNC */
				  STM32_PINMUX('D', 5, AF13)	/* LTDC_B0 */
				  STM32_PINMUX('D', 10, AF14)	/* LTDC_B2 */
				  STM32_PINMUX('D', 11, AF11)	/* LTDC_R7 */
				  STM32_PINMUX('D', 14, AF14)	/* LTDC_R4 */
				  STM32_PINMUX('D', 15, AF14)	/* LTDC_B5 */
				  STM32_PINMUX('E', 7, AF14)	/* LTDC_R5 */
				  STM32_PINMUX('E', 11, AF9)	/* LTDC_R0 */
				  STM32_PINMUX('E', 12, AF14)	/* LTDC_G6 */
				  STM32_PINMUX('E', 15, AF14)	/* LTDC_B7 */
				  STM32_PINMUX('F', 1, AF14)	/* LTDC_G1 */
				  STM32_PINMUX('F', 2, AF14)	/* LTDC_B3 */
				  STM32_PINMUX('F', 3, AF14)	/* LTDC_G3 */
				  STM32_PINMUX('F', 5, AF9)	/* LTDC_G0 */
				  STM32_PINMUX('G', 0, AF14)	/* LTDC_G5 */
				  STM32_PINMUX('G', 5, AF11)	/* LTDC_G4 */
				  STM32_PINMUX('G', 7, AF11)	/* LTDC_R1 */
				  STM32_PINMUX('G', 8, AF7)	/* LTDC_B1 */
				  STM32_PINMUX('H', 8, AF14)	/* LTDC_R2 */
				  STM32_PINMUX('H', 10, AF13)	/* LTDC_HSYNC */
				  STM32_PINMUX('H', 13, AF14)	/* LTDC_G2 */
				  STM32_PINMUX('H', 14, AF11)	/* LTDC_B4 */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('D', 9, AF13)>; /* LTDC_CLK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	ltdc_sleep_pins: ltdc_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('A', 9, ANALOG)	/* LTDC_R6 */
				  STM32_PINMUX('A', 15, ANALOG)	/* LTDC_G7 */
				  STM32_PINMUX('B', 5, ANALOG)	/* LTDC_DE */
				  STM32_PINMUX('B', 6, ANALOG)	/* LTDC_B6 */
				  STM32_PINMUX('B', 10, ANALOG)	/* LTDC_R3 */
				  STM32_PINMUX('B', 12, ANALOG)	/* LTDC_VSYNC */
				  STM32_PINMUX('D', 5, ANALOG)	/* LTDC_B0 */
				  STM32_PINMUX('D', 9, ANALOG)	/* LTDC_CLK */
				  STM32_PINMUX('D', 10, ANALOG)	/* LTDC_B2 */
				  STM32_PINMUX('D', 11, ANALOG)	/* LTDC_R7 */
				  STM32_PINMUX('D', 14, ANALOG)	/* LTDC_R4 */
				  STM32_PINMUX('D', 15, ANALOG)	/* LTDC_B5 */
				  STM32_PINMUX('E', 7, ANALOG)	/* LTDC_R5 */
				  STM32_PINMUX('E', 11, ANALOG)	/* LTDC_R0 */
				  STM32_PINMUX('E', 12, ANALOG)	/* LTDC_G6 */
				  STM32_PINMUX('E', 15, ANALOG)	/* LTDC_B7 */
				  STM32_PINMUX('F', 1, ANALOG)	/* LTDC_G1 */
				  STM32_PINMUX('F', 2, ANALOG)	/* LTDC_B3 */
				  STM32_PINMUX('F', 3, ANALOG)	/* LTDC_G3 */
				  STM32_PINMUX('F', 5, ANALOG)	/* LTDC_G0 */
				  STM32_PINMUX('G', 0, ANALOG)	/* LTDC_G5 */
				  STM32_PINMUX('G', 5, ANALOG)	/* LTDC_G4 */
				  STM32_PINMUX('G', 7, ANALOG)	/* LTDC_R1 */
				  STM32_PINMUX('G', 8, ANALOG)	/* LTDC_B1 */
				  STM32_PINMUX('H', 8, ANALOG)	/* LTDC_R2 */
				  STM32_PINMUX('H', 10, ANALOG)	/* LTDC_HSYNC */
				  STM32_PINMUX('H', 13, ANALOG)	/* LTDC_G2 */
				  STM32_PINMUX('H', 14, ANALOG)	/* LTDC_B4 */
			>;
		};
	};

	sdmmc1_pins: sdmmc1-0 {
		pins1 {
			pinmux = <
				  STM32_PINMUX('C', 9, AF12)	/* SDMMC1_D1 */
				  STM32_PINMUX('C', 10, AF12)	/* SDMMC1_D2 */
				  STM32_PINMUX('C', 11, AF12)	/* SDMMC1_D3 */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};

		pins3 {
			pinmux = <
				  STM32_PINMUX('C', 8, AF12) /* SDMMC1_D0 */
				  STM32_PINMUX('D', 2, AF12) /* SDMMC1_CMD */
			>;
			bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	sdmmc1_opendrain_pins: sdmmc1_opendrain-0 {
		pins1 {
			pinmux = <
				  STM32_PINMUX('C', 9, AF12)	/* SDMMC1_D1 */
				  STM32_PINMUX('C', 10, AF12)	/* SDMMC1_D2 */
				  STM32_PINMUX('C', 11, AF12)	/* SDMMC1_D3 */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};

		pins3 {
			pinmux = <STM32_PINMUX('C', 8, AF12)>; /* SDMMC1_D0 */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};

		pins4 {
			pinmux = <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
			bias-pull-up;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc1_sleep_pins: sdmmc1_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('C', 8, ANALOG)	/* SDMMC1_D0 */
				  STM32_PINMUX('C', 9, ANALOG)	/* SDMMC1_D1 */
				  STM32_PINMUX('C', 10, ANALOG)	/* SDMMC1_D2 */
				  STM32_PINMUX('C', 11, ANALOG)	/* SDMMC1_D3 */
				  STM32_PINMUX('C', 12, ANALOG)	/* SDMMC1_CK */
				  STM32_PINMUX('D', 2, ANALOG)	/* SDMMC1_CMD */
			>;
		};
	};

	sdmmc2_pins: sdmmc2-0 {
		pins1 {
			pinmux = <
				  STM32_PINMUX('B', 3, AF10)	/* SDMMC2_D2 */
				  STM32_PINMUX('B', 4, AF10)	/* SDMMC2_D3 */
				  STM32_PINMUX('B', 9, AF10)	/* SDMMC2_D5 */
				  STM32_PINMUX('B', 14, AF10)	/* SDMMC2_D0 */
				  STM32_PINMUX('B', 15, AF10)	/* SDMMC2_D1 */
				  STM32_PINMUX('C', 6, AF10)	/* SDMMC2_D6 */
				  STM32_PINMUX('C', 7, AF10)	/* SDMMC2_D7 */
				  STM32_PINMUX('F', 0, AF10)	/* SDMMC2_D4 */
				  STM32_PINMUX('G', 6, AF10)	/* SDMMC2_CMD */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('E', 3, AF10)>; /* SDMMC2_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	sdmmc2_opendrain_pins: sdmmc2_opendrain-0 {
		pins1 {
			pinmux = <
				  STM32_PINMUX('B', 3, AF10)	/* SDMMC2_D2 */
				  STM32_PINMUX('B', 4, AF10)	/* SDMMC2_D3 */
				  STM32_PINMUX('B', 9, AF10)	/* SDMMC2_D5 */
				  STM32_PINMUX('B', 14, AF10)	/* SDMMC2_D0 */
				  STM32_PINMUX('B', 15, AF10)	/* SDMMC2_D1 */
				  STM32_PINMUX('C', 6, AF10)	/* SDMMC2_D6 */
				  STM32_PINMUX('C', 7, AF10)	/* SDMMC2_D7 */
				  STM32_PINMUX('F', 0, AF10)	/* SDMMC2_D4 */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('E', 3, AF10)>; /* SDMMC2_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};

		pins3 {
			pinmux = <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			bias-disable;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc2_sleep_pins: sdmmc2_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('B', 3, ANALOG)	/* SDMMC2_D2 */
				  STM32_PINMUX('B', 4, ANALOG)	/* SDMMC2_D3 */
				  STM32_PINMUX('B', 9, ANALOG)	/* SDMMC2_D5 */
				  STM32_PINMUX('B', 14, ANALOG)	/* SDMMC2_D0 */
				  STM32_PINMUX('B', 15, ANALOG)	/* SDMMC2_D1 */
				  STM32_PINMUX('C', 6, ANALOG)	/* SDMMC2_D6 */
				  STM32_PINMUX('C', 7, ANALOG)	/* SDMMC2_D7 */
				  STM32_PINMUX('E', 3, ANALOG)	/* SDMMC2_CK */
				  STM32_PINMUX('F', 0, ANALOG)	/* SDMMC2_D4 */
				  STM32_PINMUX('G', 6, ANALOG)	/* SDMMC2_CMD */
			>;
		};
	};

	uart4_pins: uart4-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 6, AF8)>; /* UART4_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('D', 8, AF8)>; /* UART4_RX */
			bias-disable;
		};
	};

	uart4_sleep_pins: uart4_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('D', 6, ANALOG) /* UART4_TX */
				  STM32_PINMUX('D', 8, ANALOG) /* UART4_RX */
			>;
		};
	};

	uart8_pins: uart8-0 {
		pins1 {
			pinmux = <
				  STM32_PINMUX('E', 1, AF8)  /* UART8_TX */
				  STM32_PINMUX('E', 14, AF8) /* UART8_DE */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('F', 9, AF8)>; /* UART8_RX */
			bias-disable;
		};
	};

	uart8_sleep_pins: uart8_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('E', 1, ANALOG)	/* UART8_TX */
				  STM32_PINMUX('E', 14, ANALOG)	/* UART8_DE */
				  STM32_PINMUX('F', 9, ANALOG)	/* UART8_RX */
			>;
		};
	};

	usart1_pins: usart1-0 {
		pins1 {
			pinmux = <
				  STM32_PINMUX('A', 12, AF7) /* USART1_DE */
				  STM32_PINMUX('C', 0, AF7)  /* USART1_TX */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('D', 13, AF7)>; /* USART1_RX */
			bias-disable;
		};
	};

	usart1_sleep_pins: usart1_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('A', 12, ANALOG)	/* USART1_DE */
				  STM32_PINMUX('C', 0, ANALOG)	/* USART1_TX */
				  STM32_PINMUX('D', 13, ANALOG)	/* USART1_RX */
			>;
		};
	};

	usart2_pins: usart2-0 {
		pins1 {
			pinmux = <
				  STM32_PINMUX('D', 3, AF3) /* USART2_CTS */
				  STM32_PINMUX('F', 4, AF3) /* USART2_RX */
			>;
			bias-disable;
		};

		pins2 {
			pinmux = <
				  STM32_PINMUX('D', 4, AF3)  /* USART2_RTS */
				  STM32_PINMUX('F', 13, AF7) /* USART2_TX */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	usart2_sleep_pins: usart2_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('D', 3, ANALOG)	/* USART2_CTS */
				  STM32_PINMUX('D', 4, ANALOG)	/* USART2_RTS */
				  STM32_PINMUX('F', 4, ANALOG)	/* USART2_RX */
				  STM32_PINMUX('F', 13, ANALOG)	/* USART2_TX */
			>;
		};
	};

	usart3_pins: usart3-0 {
		pins1 {
			pinmux = <STM32_PINMUX('G', 11, AF7)>; /* USART3_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('G', 4, AF8)>; /* USART3_RX */
			bias-disable;
		};
	};

	usart3_sleep_pins: usart3_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('G', 4, ANALOG)  /* USART3_RX */
				  STM32_PINMUX('G', 11, ANALOG) /* USART3_TX */
			>;
		};
	};

	usb_otg_hs_pins: usb_otg_hs-0 {
		pins {
			pinmux = <STM32_PINMUX('I', 7, ANALOG)>; /* USB_OTG_HS_VBUS */
		};
	};

	usb_otg_hs_sleep_pins: usb_otg_hs_sleep-0 {
		pins {
			pinmux = <STM32_PINMUX('I', 7, ANALOG)>; /* USB_OTG_HS_VBUS */
		};
	};
};
