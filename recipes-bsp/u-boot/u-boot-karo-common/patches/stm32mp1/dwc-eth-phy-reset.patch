Index: u-boot/drivers/net/dwc_eth_qos.c
===================================================================
--- u-boot.orig/drivers/net/dwc_eth_qos.c
+++ u-boot/drivers/net/dwc_eth_qos.c
@@ -315,6 +315,9 @@ struct eqos_priv {
 	void *rx_pkt;
 	bool started;
 	bool reg_access_ok;
+	int phy_addr;
+	int phy_reset_duration;
+	int phy_reset_post_delay;
 };
 
 /*
@@ -696,6 +699,34 @@ static int eqos_start_resets_tegra186(st
 
 static int eqos_start_resets_stm32(struct udevice *dev)
 {
+	struct eqos_priv *eqos = dev_get_priv(dev);
+	int ret;
+
+	debug("%s(dev=%p):\n", __func__, dev);
+
+	if (!dm_gpio_is_valid(&eqos->phy_reset_gpio))
+		return 0;
+
+	debug("%s@%d: Asserting PHY reset\n", __func__, __LINE__);
+	ret = dm_gpio_set_value(&eqos->phy_reset_gpio, 1);
+	if (ret < 0) {
+		pr_err("dm_gpio_set_value(phy_reset, assert) failed: %d\n",
+		       ret);
+		return ret;
+	}
+
+	udelay(eqos->phy_reset_duration);
+
+	debug("%s@%d: Deasserting PHY reset\n", __func__, __LINE__);
+	ret = dm_gpio_set_value(&eqos->phy_reset_gpio, 0);
+	if (ret < 0) {
+		pr_err("dm_gpio_set_value(phy_reset, deassert) failed: %d\n",
+		       ret);
+		return ret;
+	}
+
+	udelay(eqos->phy_reset_post_delay);
+
 	return 0;
 }
 
@@ -711,6 +742,12 @@ static int eqos_stop_resets_tegra186(str
 
 static int eqos_stop_resets_stm32(struct udevice *dev)
 {
+	struct eqos_priv *eqos = dev_get_priv(dev);
+
+	if (!dm_gpio_is_valid(&eqos->phy_reset_gpio))
+		return 0;
+
+	dm_gpio_set_value(&eqos->phy_reset_gpio, 1);
 	return 0;
 }
 
@@ -1470,6 +1507,7 @@ static int eqos_probe_resources_tegra186
 		pr_err("gpio_request_by_name(phy reset) failed: %d\n", ret);
 		goto err_free_reset_eqos;
 	}
+	eqos->phy_reset_duration = 2;
 
 	ret = clk_get_by_name(dev, "slave_bus", &eqos->clk_slave_bus);
 	if (ret) {
@@ -1571,9 +1609,26 @@ static int eqos_probe_resources_stm32(st
 	if (ret)
 		pr_warn("No phy clock provided %d\n", ret);
 
+	ret = gpio_request_by_name(dev, "phy-reset-gpios", 0,
+				   &eqos->phy_reset_gpio,
+				   GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE);
+	if (ret && ret != -ENOENT) {
+		pr_err("requesting phy-reset-gpio failed: %d\n", ret);
+		goto err_free_clk_tx;
+	}
+
+	eqos->phy_reset_duration = dev_read_u32_default(dev,
+							"phy-reset-duration-us",
+							2);
+	eqos->phy_reset_post_delay = dev_read_u32_default(dev,
+							  "phy-reset-post-delay-us",
+							  20000);
+
 	debug("%s: OK\n", __func__);
 	return 0;
 
+err_free_clk_tx:
+	clk_free(&eqos->clk_tx);
 err_free_clk_rx:
 	clk_free(&eqos->clk_rx);
 err_free_clk_master_bus:
@@ -1641,6 +1696,8 @@ static int eqos_remove_resources_stm32(s
 	clk_free(&eqos->clk_master_bus);
 	if (clk_valid(&eqos->clk_ck))
 		clk_free(&eqos->clk_ck);
+	if (dm_gpio_is_valid(&eqos->phy_reset_gpio))
+		dm_gpio_free(dev, &eqos->phy_reset_gpio);
 
 	debug("%s: OK\n", __func__);
 	return 0;
