Index: u-boot/drivers/usb/gadget/udc/udc-core.c
===================================================================
--- u-boot.orig/drivers/usb/gadget/udc/udc-core.c
+++ u-boot/drivers/usb/gadget/udc/udc-core.c
@@ -186,11 +186,9 @@ int usb_add_gadget_udc_release(struct de
 		goto err1;
 
 	dev_set_name(&gadget->dev, "gadget");
-	gadget->dev.parent = parent;
 
 	udc->dev.release = usb_udc_release;
 	udc->dev.class = udc_class;
-	udc->dev.parent = parent;
 
 	udc->gadget = gadget;
 
@@ -224,8 +222,8 @@ EXPORT_SYMBOL_GPL(usb_add_gadget_udc);
 
 static void usb_gadget_remove_driver(struct usb_udc *udc)
 {
-	dev_dbg(&udc->dev, "unregistering UDC driver [%s]\n",
-			udc->driver->function);
+	dev_dbg(NULL, "unregistering UDC driver [%s]\n",
+		udc->driver->function);
 
 	usb_gadget_disconnect(udc->gadget);
 	udc->driver->disconnect(udc->gadget);
@@ -251,13 +249,13 @@ void usb_del_gadget_udc(struct usb_gadge
 		if (udc->gadget == gadget)
 			goto found;
 
-	dev_err(gadget->dev.parent, "gadget not registered.\n");
+	dev_err(NULL, "gadget not registered.\n");
 	mutex_unlock(&udc_lock);
 
 	return;
 
 found:
-	dev_vdbg(gadget->dev.parent, "unregistering gadget\n");
+	dev_vdbg(NULL, "unregistering gadget\n");
 
 	list_del(&udc->list);
 	mutex_unlock(&udc_lock);
@@ -294,8 +292,8 @@ static int udc_bind_to_driver(struct usb
 {
 	int ret;
 
-	dev_dbg(&udc->dev, "registering UDC driver [%s]\n",
-			driver->function);
+	dev_dbg(NULL, "registering UDC driver [%s]\n",
+		driver->function);
 
 	udc->driver = driver;
 
@@ -314,7 +312,7 @@ static int udc_bind_to_driver(struct usb
 	return 0;
 err1:
 	if (ret != -EISNAM)
-		dev_err(&udc->dev, "failed to start %s: %d\n",
+		dev_err(NULL, "failed to start %s: %d\n",
 			udc->driver->function, ret);
 	udc->driver = NULL;
 	return ret;
Index: u-boot/include/dm/device_compat.h
===================================================================
--- u-boot.orig/include/dm/device_compat.h
+++ u-boot/include/dm/device_compat.h
@@ -36,12 +36,19 @@
  * REVISIT:
  * print device name like Linux
  */
+#ifndef BUGGY_USE_OF_STRUCT_DEVICE
 #define dev_printk(dev, fmt, ...)				\
 ({								\
 	if (dev)						\
 		printk("%s: ", dev_read_name(dev));		\
 	printk(fmt, ##__VA_ARGS__);				\
 })
+#else
+#define dev_printk(dev, fmt, ...)				\
+({								\
+	printk(fmt, ##__VA_ARGS__);				\
+})
+#endif
 
 #define __dev_printk(level, dev, fmt, ...)			\
 ({								\
Index: u-boot/drivers/usb/dwc3/gadget.c
===================================================================
--- u-boot.orig/drivers/usb/dwc3/gadget.c
+++ u-boot/drivers/usb/dwc3/gadget.c
@@ -2612,7 +2612,7 @@ int dwc3_gadget_init(struct dwc3 *dwc)
 	if (ret)
 		goto err4;
 
-	ret = usb_add_gadget_udc((struct device *)dwc->dev, &dwc->gadget);
+	ret = usb_add_gadget_udc(NULL, &dwc->gadget);
 	if (ret) {
 		dev_err(dwc->dev, "failed to register udc\n");
 		goto err4;
Index: u-boot/include/linux/usb/gadget.h
===================================================================
--- u-boot.orig/include/linux/usb/gadget.h
+++ u-boot/include/linux/usb/gadget.h
@@ -885,9 +885,9 @@ int usb_gadget_register_driver(struct us
  */
 int usb_gadget_unregister_driver(struct usb_gadget_driver *driver);
 
-int usb_add_gadget_udc_release(struct device *parent,
+int usb_add_gadget_udc_release(struct device *__unused__,
 		struct usb_gadget *gadget, void (*release)(struct device *dev));
-int usb_add_gadget_udc(struct device *parent, struct usb_gadget *gadget);
+int usb_add_gadget_udc(struct device *__unused__, struct usb_gadget *gadget);
 void usb_del_gadget_udc(struct usb_gadget *gadget);
 /*-------------------------------------------------------------------------*/
 
Index: u-boot/drivers/usb/gadget/dwc2_udc_otg.c
===================================================================
--- u-boot.orig/drivers/usb/gadget/dwc2_udc_otg.c
+++ u-boot/drivers/usb/gadget/dwc2_udc_otg.c
@@ -1193,7 +1193,7 @@ static int dwc2_udc_otg_probe(struct ude
 
 	the_controller->driver = 0;
 
-	ret = usb_add_gadget_udc((struct device *)dev, &the_controller->gadget);
+	ret = usb_add_gadget_udc(NULL, &the_controller->gadget);
 
 	return ret;
 }
