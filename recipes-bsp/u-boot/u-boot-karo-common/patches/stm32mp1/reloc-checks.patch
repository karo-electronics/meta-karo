Index: u-boot/arch/arm/lib/crt0.S
===================================================================
--- u-boot.orig/arch/arm/lib/crt0.S
+++ u-boot/arch/arm/lib/crt0.S
@@ -130,6 +130,10 @@ ENTRY(_main)
 	ldr	r9, [r9, #GD_BD]		/* r9 = gd->bd */
 	sub	r9, r9, #GD_SIZE		/* new GD is below bd */
 
+	blx	check_rel_dyn
+	cmp	r0, #0
+	bne	hang
+
 	adr	lr, here
 	ldr	r0, [r9, #GD_RELOC_OFF]		/* r0 = gd->reloc_off */
 	add	lr, lr, r0
Index: u-boot/common/board_f.c
===================================================================
--- u-boot.orig/common/board_f.c
+++ u-boot/common/board_f.c
@@ -16,6 +16,7 @@
 #include <cpu.h>
 #include <cpu_func.h>
 #include <dm.h>
+#include <elf.h>
 #include <env.h>
 #include <env_internal.h>
 #include <fdtdec.h>
@@ -763,6 +764,34 @@ static int fix_fdt(void)
 }
 #endif
 
+int check_rel_dyn(void)
+{
+	unsigned long img_start = (unsigned long)__image_copy_start;
+	unsigned long img_end = (unsigned long)_image_binary_end;
+	struct reloc_entry *rel_start = (void *)__rel_dyn_start;
+	struct reloc_entry *rel_end = (void *)__rel_dyn_end;
+	struct reloc_entry {
+		unsigned long addr;
+		unsigned int code;
+	} *p;
+	int errors = 0;
+
+	debug("Checking rel.dyn section from %p..%p\n", rel_start, rel_end);
+	for (p = rel_start; p < rel_end; p++) {
+		if (p->addr < img_start || p->addr > img_end) {
+			if (errors == 0)
+				pr_err("Relocation table has been corrupted! Fix your U-Boot sourcecode!\n");
+			pr_err("Entry at %p in relocation table points outside the code to be relocated: %08lx, %08x\n",
+			       p, p->addr, p->code);
+			errors++;
+		}
+		if (p->code != R_ARM_RELATIVE)
+			pr_warn("Entry at %p in relocation table has unsupported relocation type: %08lx, %08x\n",
+				p, p->addr, p->code);
+	}
+	return errors;
+}
+
 /* ARM calls relocate_code from its crt0.S */
 #if !defined(CONFIG_ARM) && !defined(CONFIG_SANDBOX) && \
 		!CONFIG_IS_ENABLED(X86_64)
