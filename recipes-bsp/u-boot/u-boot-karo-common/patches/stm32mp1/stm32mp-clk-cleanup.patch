Index: u-boot/drivers/clk/clk_stm32mp1.c
===================================================================
--- u-boot.orig/drivers/clk/clk_stm32mp1.c
+++ u-boot/drivers/clk/clk_stm32mp1.c
@@ -778,7 +778,7 @@ static int stm32mp1_clk_get_id(struct st
 	}
 
 	if (i == nb_clks) {
-		printf("%s: clk id %d not found\n", __func__, (u32)id);
+		printf("%s: clk id %ld not found\n", __func__, id);
 		return -EINVAL;
 	}
 
@@ -838,16 +838,15 @@ static int stm32mp1_clk_get_parent(struc
 
 	if (p < sel[s].nb_parent) {
 #ifdef DEBUG
-		debug("%s: %s clock is the parent %s of clk id %d\n", __func__,
-		      stm32mp1_clk_parent_name[sel[s].parent[p]],
-		      stm32mp1_clk_parent_sel_name[s],
-		      (u32)id);
+		debug("%s: %s clock is the parent %s of clk id %ld\n",
+		      __func__, stm32mp1_clk_parent_name[sel[s].parent[p]],
+		      stm32mp1_clk_parent_sel_name[s], id);
 #endif
 		return sel[s].parent[p];
 	}
 
-	pr_err("%s: no parents defined for clk id %d\n",
-	       __func__, (u32)id);
+	pr_err("%s: no parents defined for clk id %ld\n",
+	       __func__, id);
 
 	return -EINVAL;
 }
@@ -1134,7 +1133,7 @@ static int stm32mp1_clk_enable(struct cl
 	else
 		setbits_le32(priv->base + gate[i].offset, BIT(gate[i].bit));
 
-	debug("%s: id clock %d has been enabled\n", __func__, (u32)clk->id);
+	debug("%s: id clock %ld has been enabled\n", __func__, clk->id);
 
 	return 0;
 }
@@ -1155,7 +1154,7 @@ static int stm32mp1_clk_disable(struct c
 	else
 		clrbits_le32(priv->base + gate[i].offset, BIT(gate[i].bit));
 
-	debug("%s: id clock %d has been disabled\n", __func__, (u32)clk->id);
+	debug("%s: id clock %ld has been disabled\n", __func__, clk->id);
 
 	return 0;
 }
@@ -1172,8 +1171,8 @@ static ulong stm32mp1_clk_get_rate(struc
 	rate = stm32mp1_clk_get(priv, p);
 
 #ifdef DEBUG
-	debug("%s: computed rate for id clock %d is %d (parent is %s)\n",
-	      __func__, (u32)clk->id, (u32)rate, stm32mp1_clk_parent_name[p]);
+	debug("%s: computed rate for id clock %ld is %lu (parent is %s)\n",
+	      __func__, clk->id, rate, stm32mp1_clk_parent_name[p]);
 #endif
 	return rate;
 }
@@ -1411,7 +1410,7 @@ static int pll_config(struct stm32mp1_cl
 
 	if (refclk < (stm32mp1_pll[type].refclk_min * 1000000) ||
 	    refclk > (stm32mp1_pll[type].refclk_max * 1000000)) {
-		debug("invalid refclk = %x\n", (u32)refclk);
+		debug("invalid refclk: %lu\n", refclk);
 		return -EINVAL;
 	}
 	if (type == PLL_800 && refclk >= 8000000)
@@ -1813,7 +1812,7 @@ static int stm32mp1_clktree(struct udevi
 		bool ckper_disabled = false;
 
 		for (i = 0; i < len / sizeof(u32); i++) {
-			u32 pkcs = (u32)fdt32_to_cpu(pkcs_cell[i]);
+			u32 pkcs = fdt32_to_cpu(pkcs_cell[i]);
 
 			if (pkcs == CLK_CKPER_DISABLED) {
 				ckper_disabled = true;
@@ -1966,7 +1965,7 @@ static void stm32mp1_osc_init(struct ude
 
 	for (i = 0; i < NB_OSC; i++) {
 		stm32mp1_osc_clk_init(name[i], priv, i);
-		debug("%d: %s => %x\n", i, name[i], (u32)priv->osc[i]);
+		debug("%d: %s => %lu\n", i, name[i], priv->osc[i]);
 	}
 }
 
@@ -1991,8 +1990,8 @@ static void  __maybe_unused stm32mp1_clk
 			       stm32mp1_clk_parent_sel_name[i], i,
 			       stm32mp1_clk_parent_name[s], s);
 		} else {
-			printf("- %s(%d) => parent index %d is invalid\n",
-			       stm32mp1_clk_parent_sel_name[i], i, p);
+			printf("- %s(%d) => DISABLED\n",
+			       stm32mp1_clk_parent_sel_name[i], i);
 		}
 	}
 }
