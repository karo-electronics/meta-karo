Index: u-boot/drivers/phy/phy-stm32-usbphyc.c
===================================================================
--- u-boot.orig/drivers/phy/phy-stm32-usbphyc.c
+++ u-boot/drivers/phy/phy-stm32-usbphyc.c
@@ -146,11 +146,14 @@ static bool stm32_usbphyc_is_powered(str
 static int stm32_usbphyc_phy_init(struct phy *phy)
 {
 	struct stm32_usbphyc *usbphyc = dev_get_priv(phy->dev);
-	struct stm32_usbphyc_phy *usbphyc_phy = usbphyc->phys + phy->id;
+	struct stm32_usbphyc_phy *usbphyc_phy = &usbphyc->phys[phy->id];
 	bool pllen = readl(usbphyc->base + STM32_USBPHYC_PLL) & PLLEN ?
 		     true : false;
 	int ret;
 
+	if (phy->id >= MAX_PHYS)
+		return -EINVAL;
+
 	pr_debug("%s phy ID = %lu\n", __func__, phy->id);
 	/* Check if one phy port has already configured the pll */
 	if (pllen && stm32_usbphyc_is_init(usbphyc))
@@ -194,9 +197,12 @@ initialized:
 static int stm32_usbphyc_phy_exit(struct phy *phy)
 {
 	struct stm32_usbphyc *usbphyc = dev_get_priv(phy->dev);
-	struct stm32_usbphyc_phy *usbphyc_phy = usbphyc->phys + phy->id;
+	struct stm32_usbphyc_phy *usbphyc_phy = &usbphyc->phys[phy->id];
 	int ret;
 
+	if (phy->id >= MAX_PHYS)
+		return -EINVAL;
+
 	pr_debug("%s phy ID = %lu\n", __func__, phy->id);
 	usbphyc_phy->init = false;
 
@@ -261,7 +267,7 @@ static int stm32_usbphyc_phy_power_off(s
 		return 0;
 
 	if (usbphyc_phy->vdd) {
-		ret = regulator_set_enable(usbphyc_phy->vdd, false);
+		ret = regulator_set_enable_if_allowed(usbphyc_phy->vdd, false);
 		if (ret)
 			return ret;
 	}
