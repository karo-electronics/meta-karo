Index: u-boot/drivers/mtd/spi/spi-nor-core.c
===================================================================
--- u-boot.orig/drivers/mtd/spi/spi-nor-core.c
+++ u-boot/drivers/mtd/spi/spi-nor-core.c
@@ -56,7 +56,7 @@ static int spi_nor_read_reg(struct spi_n
 
 	ret = spi_nor_read_write_reg(nor, &op, val);
 	if (ret < 0)
-		dev_dbg(&flash->spimem->spi->dev, "error %d reading %x\n", ret,
+		dev_err(nor->dev, "error %d reading %x\n", ret,
 			code);
 
 	return ret;
@@ -191,7 +191,7 @@ static int read_cr(struct spi_nor *nor)
 
 	ret = nor->read_reg(nor, SPINOR_OP_RDCR, &val, 1);
 	if (ret < 0) {
-		dev_dbg(nor->dev, "error %d reading CR\n", ret);
+		dev_err(nor->dev, "error %d reading CR\n", ret);
 		return ret;
 	}
 
@@ -366,9 +366,9 @@ static int spi_nor_sr_ready(struct spi_n
 
 	if (nor->flags & SNOR_F_USE_CLSR && sr & (SR_E_ERR | SR_P_ERR)) {
 		if (sr & SR_E_ERR)
-			dev_dbg(nor->dev, "Erase Error occurred\n");
+			dev_err(nor->dev, "Erase Error occurred\n");
 		else
-			dev_dbg(nor->dev, "Programming Error occurred\n");
+			dev_err(nor->dev, "Programming Error occurred\n");
 
 		nor->write_reg(nor, SPINOR_OP_CLSR, NULL, 0);
 		return -EIO;
@@ -887,7 +887,7 @@ static const struct flash_info *spi_nor_
 
 	tmp = nor->read_reg(nor, SPINOR_OP_RDID, id, SPI_NOR_MAX_ID_LEN);
 	if (tmp < 0) {
-		dev_dbg(nor->dev, "error %d reading JEDEC ID\n", tmp);
+		dev_err(nor->dev, "error %d reading JEDEC ID\n", tmp);
 		return ERR_PTR(tmp);
 	}
 
@@ -1340,14 +1340,14 @@ static int write_sr_cr(struct spi_nor *n
 
 	ret = nor->write_reg(nor, SPINOR_OP_WRSR, sr_cr, 2);
 	if (ret < 0) {
-		dev_dbg(nor->dev,
+		dev_err(nor->dev,
 			"error while writing configuration register\n");
 		return -EINVAL;
 	}
 
 	ret = spi_nor_wait_till_ready(nor);
 	if (ret) {
-		dev_dbg(nor->dev,
+		dev_err(nor->dev,
 			"timeout while writing configuration register\n");
 		return ret;
 	}
@@ -1376,7 +1376,7 @@ static int spansion_read_cr_quad_enable(
 	/* Check current Quad Enable bit value. */
 	ret = read_cr(nor);
 	if (ret < 0) {
-		dev_dbg(dev, "error while reading configuration register\n");
+		dev_err(nor->dev, "error while reading configuration register\n");
 		return -EINVAL;
 	}
 
@@ -1388,7 +1388,7 @@ static int spansion_read_cr_quad_enable(
 	/* Keep the current value of the Status Register. */
 	ret = read_sr(nor);
 	if (ret < 0) {
-		dev_dbg(dev, "error while reading status register\n");
+		dev_err(dev, "error while reading status register\n");
 		return -EINVAL;
 	}
 	sr_cr[0] = ret;
@@ -1400,7 +1400,7 @@ static int spansion_read_cr_quad_enable(
 	/* Read back and check it. */
 	ret = read_cr(nor);
 	if (!(ret > 0 && (ret & CR_QUAD_EN_SPAN))) {
-		dev_dbg(nor->dev, "Spansion Quad bit not set\n");
+		dev_err(nor->dev, "Spansion Quad bit not set\n");
 		return -EINVAL;
 	}
 
@@ -1429,7 +1429,7 @@ static int spansion_no_read_cr_quad_enab
 	/* Keep the current value of the Status Register. */
 	ret = read_sr(nor);
 	if (ret < 0) {
-		dev_dbg(nor->dev, "error while reading status register\n");
+		dev_err(nor->dev, "error while reading status register\n");
 		return -EINVAL;
 	}
 	sr_cr[0] = ret;
@@ -2384,7 +2384,7 @@ static int spi_nor_setup(struct spi_nor
 			SNOR_HWCAPS_PP_4_4_4 |
 			SNOR_HWCAPS_PP_8_8_8);
 	if (shared_mask & ignored_mask) {
-		dev_dbg(nor->dev,
+		dev_err(nor->dev,
 			"SPI n-n-n protocols are not supported yet.\n");
 		shared_mask &= ~ignored_mask;
 	}
@@ -2392,7 +2392,7 @@ static int spi_nor_setup(struct spi_nor
 	/* Select the (Fast) Read command. */
 	err = spi_nor_select_read(nor, params, shared_mask);
 	if (err) {
-		dev_dbg(nor->dev,
+		dev_err(nor->dev,
 			"can't select read settings supported by both the SPI controller and memory.\n");
 		return err;
 	}
@@ -2400,7 +2400,7 @@ static int spi_nor_setup(struct spi_nor
 	/* Select the Page Program command. */
 	err = spi_nor_select_pp(nor, params, shared_mask);
 	if (err) {
-		dev_dbg(nor->dev,
+		dev_err(nor->dev,
 			"can't select write settings supported by both the SPI controller and memory.\n");
 		return err;
 	}
@@ -2408,7 +2408,7 @@ static int spi_nor_setup(struct spi_nor
 	/* Select the Sector Erase command. */
 	err = spi_nor_select_erase(nor, info);
 	if (err) {
-		dev_dbg(nor->dev,
+		dev_err(nor->dev,
 			"can't select erase settings supported by both the SPI controller and memory.\n");
 		return err;
 	}
@@ -2444,7 +2444,7 @@ static int spi_nor_init(struct spi_nor *
 	if (nor->quad_enable) {
 		err = nor->quad_enable(nor);
 		if (err) {
-			dev_dbg(nor->dev, "quad mode not supported\n");
+			dev_err(nor->dev, "quad mode not supported\n");
 			return err;
 		}
 	}
@@ -2611,7 +2611,7 @@ int spi_nor_scan(struct spi_nor *nor)
 	}
 
 	if (nor->addr_width > SPI_NOR_MAX_ADDR_WIDTH) {
-		dev_dbg(dev, "address width is too large: %u\n",
+		dev_err(nor->dev, "address width is too large: %u\n",
 			nor->addr_width);
 		return -EINVAL;
 	}
Index: u-boot/drivers/mtd/spi/spi-nor-tiny.c
===================================================================
--- u-boot.orig/drivers/mtd/spi/spi-nor-tiny.c
+++ u-boot/drivers/mtd/spi/spi-nor-tiny.c
@@ -8,6 +8,7 @@
  *
  * Synced from Linux v4.19
  */
+#define DEBUG
 
 #include <common.h>
 #include <dm/device_compat.h>
@@ -55,7 +56,7 @@ static int spi_nor_read_reg(struct spi_n
 
 	ret = spi_nor_read_write_reg(nor, &op, val);
 	if (ret < 0)
-		dev_dbg(&flash->spimem->spi->dev, "error %d reading %x\n", ret,
+		dev_err(nor->dev, "error %d reading %x\n", ret,
 			code);
 
 	return ret;
@@ -122,7 +123,7 @@ static int read_cr(struct spi_nor *nor)
 
 	ret = spi_nor_read_reg(nor, SPINOR_OP_RDCR, &val, 1);
 	if (ret < 0) {
-		dev_dbg(nor->dev, "error %d reading CR\n", ret);
+		dev_err(nor->dev, "error %d reading CR\n", ret);
 		return ret;
 	}
 
@@ -363,7 +364,7 @@ static const struct flash_info *spi_nor_
 
 	tmp = spi_nor_read_reg(nor, SPINOR_OP_RDID, id, SPI_NOR_MAX_ID_LEN);
 	if (tmp < 0) {
-		dev_dbg(nor->dev, "error %d reading JEDEC ID\n", tmp);
+		dev_err(nor->dev, "error %d reading JEDEC ID\n", tmp);
 		return ERR_PTR(tmp);
 	}
 
@@ -374,7 +375,7 @@ static const struct flash_info *spi_nor_
 				return info;
 		}
 	}
-	dev_dbg(nor->dev, "unrecognized JEDEC id bytes: %02x, %02x, %02x\n",
+	dev_err(nor->dev, "unrecognized JEDEC id bytes: %02x, %02x, %02x\n",
 		id[0], id[1], id[2]);
 	return ERR_PTR(-ENODEV);
 }
@@ -475,14 +476,14 @@ static int write_sr_cr(struct spi_nor *n
 
 	ret = spi_nor_write_reg(nor, SPINOR_OP_WRSR, sr_cr, 2);
 	if (ret < 0) {
-		dev_dbg(nor->dev,
+		dev_err(nor->dev,
 			"error while writing configuration register\n");
 		return -EINVAL;
 	}
 
 	ret = spi_nor_wait_till_ready(nor);
 	if (ret) {
-		dev_dbg(nor->dev,
+		dev_err(nor->dev,
 			"timeout while writing configuration register\n");
 		return ret;
 	}
@@ -511,7 +512,7 @@ static int spansion_read_cr_quad_enable(
 	/* Check current Quad Enable bit value. */
 	ret = read_cr(nor);
 	if (ret < 0) {
-		dev_dbg(dev, "error while reading configuration register\n");
+		dev_err(dev, "error while reading configuration register\n");
 		return -EINVAL;
 	}
 
@@ -523,7 +524,7 @@ static int spansion_read_cr_quad_enable(
 	/* Keep the current value of the Status Register. */
 	ret = read_sr(nor);
 	if (ret < 0) {
-		dev_dbg(dev, "error while reading status register\n");
+		dev_err(dev, "error while reading status register\n");
 		return -EINVAL;
 	}
 	sr_cr[0] = ret;
@@ -535,7 +536,7 @@ static int spansion_read_cr_quad_enable(
 	/* Read back and check it. */
 	ret = read_cr(nor);
 	if (!(ret > 0 && (ret & CR_QUAD_EN_SPAN))) {
-		dev_dbg(nor->dev, "Spansion Quad bit not set\n");
+		dev_err(nor->dev, "Spansion Quad bit not set\n");
 		return -EINVAL;
 	}
 
@@ -657,7 +658,7 @@ static int spi_nor_setup(struct spi_nor
 	/* Select the (Fast) Read command. */
 	err = spi_nor_select_read(nor, params, shared_mask);
 	if (err) {
-		dev_dbg(nor->dev,
+		dev_err(nor->dev,
 			"can't select read settings supported by both the SPI controller and memory.\n");
 		return err;
 	}
@@ -683,7 +684,7 @@ static int spi_nor_setup(struct spi_nor
 		}
 	}
 	if (err) {
-		dev_dbg(nor->dev, "quad mode not supported\n");
+		dev_err(nor->dev, "quad mode not supported\n");
 		return err;
 	}
 
@@ -784,7 +785,7 @@ int spi_nor_scan(struct spi_nor *nor)
 	}
 
 	if (nor->addr_width > SPI_NOR_MAX_ADDR_WIDTH) {
-		dev_dbg(dev, "address width is too large: %u\n",
+		dev_err(nor->dev, "address width is too large: %u\n",
 			nor->addr_width);
 		return -EINVAL;
 	}
