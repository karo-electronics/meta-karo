diff --git a/drivers/usb/dwc2/core_intr.c b/drivers/usb/dwc2/core_intr.c
index c786560fb54e..7d98ac08429a 100644
--- a/drivers/usb/dwc2/core_intr.c
+++ b/drivers/usb/dwc2/core_intr.c
@@ -514,6 +514,8 @@ static void dwc2_handle_usb_suspend_intr(struct dwc2_hsotg *hsotg)
 	dev_dbg(hsotg->dev, "USB SUSPEND\n");
 
 	if (dwc2_is_device_mode(hsotg)) {
+		if (WARN_ON(!hsotg->gadget_enabled))
+			return;
 		/*
 		 * Check the Device status register to determine if the Suspend
 		 * state is active
@@ -571,6 +573,8 @@ static void dwc2_handle_usb_suspend_intr(struct dwc2_hsotg *hsotg)
 			call_gadget(hsotg, suspend);
 		}
 	} else {
+		if (WARN_ON(!hsotg->hcd_enabled))
+			return;
 		if (hsotg->op_state == OTG_STATE_A_PERIPHERAL) {
 			dev_dbg(hsotg->dev, "a_peripheral->a_host\n");
 
@@ -617,6 +621,8 @@ static void dwc2_handle_lpm_intr(struct dwc2_hsotg *hsotg)
 	enslpm = glpmcfg & GLPMCFG_ENBLSLPM;
 
 	if (dwc2_is_device_mode(hsotg)) {
+		if (WARN_ON(!hsotg->gadget_enabled))
+			return;
 		dev_dbg(hsotg->dev, "HIRD_THRES_EN = %d\n", hird_thres_en);
 
 		if (hird_thres_en && hird >= hird_thres) {
@@ -840,6 +846,8 @@ irqreturn_t dwc2_handle_common_intr(int irq, void *dev)
 		dev_warn(hsotg->dev, "Controller is dead\n");
 		goto out;
 	}
+	if (WARN_ON(!(hsotg->gadget_enabled || hsotg->hcd_enabled)))
+		goto out;
 
 	/* Reading current frame number value in device or host modes. */
 	if (dwc2_is_device_mode(hsotg))
diff --git a/drivers/usb/dwc2/platform.c b/drivers/usb/dwc2/platform.c
index cdfd78535cab..00c2e905b421 100644
--- a/drivers/usb/dwc2/platform.c
+++ b/drivers/usb/dwc2/platform.c
@@ -434,6 +434,7 @@ int dwc2_check_core_version(struct dwc2_hsotg *hsotg)
  * in the device private data. This allows the driver to access the dwc2_hsotg
  * structure on subsequent calls to driver methods for this device.
  */
+#define DWC2_INTR_PATCH
 static int dwc2_driver_probe(struct platform_device *dev)
 {
 	struct dwc2_hsotg *hsotg;
@@ -473,7 +474,7 @@ static int dwc2_driver_probe(struct platform_device *dev)
 	hsotg->irq = platform_get_irq(dev, 0);
 	if (hsotg->irq < 0)
 		return hsotg->irq;
-
+#ifndef DWC2_INTR_PATCH
 	dev_dbg(hsotg->dev, "registering common handler for irq%d\n",
 		hsotg->irq);
 	retval = devm_request_irq(hsotg->dev, hsotg->irq,
@@ -481,7 +482,7 @@ static int dwc2_driver_probe(struct platform_device *dev)
 				  dev_name(hsotg->dev), hsotg);
 	if (retval)
 		return retval;
-
+#endif
 	hsotg->vbus_supply = devm_regulator_get_optional(hsotg->dev, "vbus");
 	if (IS_ERR(hsotg->vbus_supply)) {
 		retval = PTR_ERR(hsotg->vbus_supply);
@@ -599,7 +600,15 @@ static int dwc2_driver_probe(struct platform_device *dev)
 		}
 		hsotg->hcd_enabled = 1;
 	}
-
+#ifdef DWC2_INTR_PATCH
+	dev_dbg(hsotg->dev, "registering common handler for irq%d\n",
+		hsotg->irq);
+	retval = devm_request_irq(hsotg->dev, hsotg->irq,
+				  dwc2_handle_common_intr, IRQF_SHARED,
+				  dev_name(hsotg->dev), hsotg);
+	if (retval)
+		goto error_init;
+#endif
 	platform_set_drvdata(dev, hsotg);
 	hsotg->hibernated = 0;
 
