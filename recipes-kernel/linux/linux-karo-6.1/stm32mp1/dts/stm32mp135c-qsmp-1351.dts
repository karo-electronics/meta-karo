// SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
/*
 * Copyright (C) 2024 Markus Bauer <MB@KARO-electronics.de>
 */

/dts-v1/;

#include <dt-bindings/pinctrl/stm32-pinfunc.h>
#include <dt-bindings/regulator/st,stm32mp13-regulator.h>

#include "stm32mp135.dtsi"
#include "stm32mp13xc.dtsi"

/ {
	model = "Ka-Ro electronics GmbH QSMP-1351 solder-in module";
	compatible = "st,stm32mp135c-qsmp-1351", "st,stm32mp135";

	aliases {
		serial0 = &uart4;
		serial1 = &usart3;
		serial2 = &usart2;
		ethernet0 = &eth1;
		mmc0 = &sdmmc2;
		mmc1 = &sdmmc1;
		usbh = &usbh_ehci;
		usbotg = &usbotg_hs;
	};

	chosen {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;
		stdout-path = "serial0:115200n8";

		framebuffer {
			compatible = "simple-framebuffer";
			clocks = <&rcc LTDC_PX>;
			status = "disabled";
		};
	};

	memory@c0000000 {
		device_type = "memory";
		reg = <0xc0000000 0x10000000>;
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		optee@ce000000{
			reg = <0xce000000 0x2000000>;
			no-map;
		};

		optee_framebuffer@cd000000 {
			reg = <0xcd000000 0x1000000>;
			no-map;
		};
	};

	reg_3v3: reg-3v3 {
		compatible = "regulator-fixed";
		regulator-name = "reg-3v3";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
	};
};

&bsec {
	status = "okay";

	board_id: board_id@ec {
		reg = <0xec 0x4>;
		st,non-secure-otp;
	};
};

&cryp {
	status = "okay";
};

&dts {
	status = "okay";
};

&eth1 {
	pinctrl-names = "default", "sleep";

	mdio0: mdio0 {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";
	};
};

&hash {
	status = "okay";
};

&i2c1 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c1_pins>;
	pinctrl-1 = <&i2c1_sleep_pins>;
	/delete-property/ dmas;
	/delete-property/ dma-names;
	status = "okay";
};

&i2c4 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c4_pins>;
	pinctrl-1 = <&i2c4_sleep_pins>;
	/delete-property/ dmas;
	/delete-property/ dma-names;
	status = "okay";
};

&i2c5 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c5_pins>;
	pinctrl-1 = <&i2c5_sleep_pins>;
	/delete-property/ dmas;
	/delete-property/ dma-names;
	status = "okay";
};

&m_can1 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&fdcan1_pins>;
	pinctrl-1 = <&fdcan1_sleep_pins>;
	status = "okay";
};

&m_can2 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&fdcan2_pins>;
	pinctrl-1 = <&fdcan2_sleep_pins>;
	status = "okay";
};

&rcc {
	status = "okay";
};

&rng {
	status = "okay";
};

&rtc {
	status = "okay";
};

&scmi_regu {
	scmi_vddcpu: voltd-vddcpu {
		reg = <VOLTD_SCMI_REGU0>;
		regulator-name = "vddcpu";
	};

	scmi_vddcore: voltd-vddcore {
		reg = <VOLTD_SCMI_REGU1>;
		regulator-name = "vdd";
	};
};

&sdmmc1 {
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc1_pins>;
	pinctrl-1 = <&sdmmc1_opendrain_pins>;
	pinctrl-2 = <&sdmmc1_sleep_pins>;
	vmmc-supply = <&scmi_vddcore>;
	st,neg-edge;
	bus-width = <4>;
};

&sdmmc2 {
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc2_pins>;
	pinctrl-1 = <&sdmmc2_opendrain_pins>;
	pinctrl-2 = <&sdmmc2_sleep_pins>;
	vmmc-supply = <&scmi_vddcore>;
	non-removable;
	no-sd;
	no-sdio;
	st,neg-edge;
	bus-width = <8>;
	mmc-ddr-3_3v;
	status = "okay";
};

&spi1 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi1_pins>;
	pinctrl-1 = <&spi1_sleep_pins>;
	status = "okay";
};

&spi5 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi5_pins>;
	pinctrl-1 = <&spi5_sleep_pins>;
	status = "okay";
};

&uart4 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart4_pins>;
	pinctrl-1 = <&uart4_sleep_pins>;
	/delete-property/ dmas;
	/delete-property/ dma-names;
	status = "okay";
};

&usart2 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&usart2_pins>;
	pinctrl-1 = <&usart2_sleep_pins>;
	/delete-property/ dmas;
	/delete-property/ dma-names;
	status = "okay";
};

&usart3 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&usart3_pins>;
	pinctrl-1 = <&usart3_sleep_pins>;
	/delete-property/ dmas;
	/delete-property/ dma-names;
	status = "okay";
};

&usbh_ehci {
	status = "okay";
};

&usbh_ohci {
	status = "okay";
};

&usbotg_hs {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&usb_otg_hs_pins>;
	pinctrl-1 = <&usb_otg_hs_sleep_pins>;
	status = "okay";
	phys = <&usbphyc_port1 0>;
	phy-names = "usb2-phy";
	usb-role-switch;
};

&usbphyc {
	status = "okay";
};

&usbphyc_port0 {
	status = "okay";
};

&usbphyc_port1 {
	status = "okay";
};

&pinctrl {
	fdcan1_pins: fdcan1-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 0, AF9)>; /* FDCAN1_RX */
			bias-disable;
		};

		pins2 {
			pinmux = <STM32_PINMUX('E', 10, AF9)>; /* FDCAN1_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	fdcan1_sleep_pins: fdcan1_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('D', 0, ANALOG) /* FDCAN1_RX */
				  STM32_PINMUX('E', 10, ANALOG) /* FDCAN1_TX */
			>;
		};
	};

	fdcan2_pins: fdcan2-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 13, AF9)>; /* FDCAN2_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('E', 0, AF9)>; /* FDCAN2_RX */
			bias-disable;
		};
	};

	fdcan2_sleep_pins: fdcan2_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('B', 13, ANALOG) /* FDCAN2_TX */
				  STM32_PINMUX('E', 0, ANALOG) /* FDCAN2_RX */
			>;
		};
	};

	i2c1_pins: i2c1-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('D', 12, AF5) /* I2C1_SCL */
				  STM32_PINMUX('E', 8, AF5) /* I2C1_SDA */
			>;
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c1_sleep_pins: i2c1_sleep-0 {
		pins {
			pinmux = <
			 	  STM32_PINMUX('D', 12, ANALOG) /* I2C1_SCL */
				  STM32_PINMUX('E', 8, ANALOG) /* I2C1_SDA */
			>;
		};
	};

	i2c4_pins: i2c4-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('B', 7, AF6) /* I2C4_SDA */
				  STM32_PINMUX('E', 2, AF4) /* I2C4_SCL */
			>;
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c4_sleep_pins: i2c4_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('B', 7, ANALOG) /* I2C4_SDA */
				  STM32_PINMUX('E', 2, ANALOG) /* I2C4_SCL */
			>;
		};
	};

	i2c5_pins: i2c5-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('D', 1, AF4) /* I2C5_SCL */
				  STM32_PINMUX('E', 13, AF4) /* I2C5_SDA */
			>;
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c5_sleep_pins: i2c5_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('D', 1, ANALOG) /* I2C5_SCL */
				  STM32_PINMUX('E', 13, ANALOG) /* I2C5_SDA */
			>;
		};
	};

	sdmmc1_pins: sdmmc1-0 {
		pins1 {
			pinmux = <
				  STM32_PINMUX('C', 9, AF12) /* SDMMC1_D1 */
				  STM32_PINMUX('C', 10, AF12) /* SDMMC1_D2 */
				  STM32_PINMUX('C', 11, AF12) /* SDMMC1_D3 */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};

		pins3 {
			pinmux = <
				  STM32_PINMUX('C', 8, AF12) /* SDMMC1_D0 */
				  STM32_PINMUX('D', 2, AF12) /* SDMMC1_CMD */
			>;
			bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	sdmmc1_opendrain_pins: sdmmc1_opendrain-0 {
		pins1 {
			pinmux = <
				  STM32_PINMUX('C', 9, AF12) /* SDMMC1_D1 */
				  STM32_PINMUX('C', 10, AF12) /* SDMMC1_D2 */
				  STM32_PINMUX('C', 11, AF12) /* SDMMC1_D3 */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};

		pins3 {
			pinmux = <STM32_PINMUX('C', 8, AF12)>; /* SDMMC1_D0 */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};

		pins4 {
			pinmux = <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
			bias-pull-up;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc1_sleep_pins: sdmmc1_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('C', 8, ANALOG) /* SDMMC1_D0 */
				  STM32_PINMUX('C', 9, ANALOG) /* SDMMC1_D1 */
				  STM32_PINMUX('C', 10, ANALOG) /* SDMMC1_D2 */
				  STM32_PINMUX('C', 11, ANALOG) /* SDMMC1_D3 */
				  STM32_PINMUX('C', 12, ANALOG) /* SDMMC1_CK */
				  STM32_PINMUX('D', 2, ANALOG) /* SDMMC1_CMD */
			>;
		};
	};

	sdmmc2_pins: sdmmc2-0 {
		pins1 {
			pinmux = <
				  STM32_PINMUX('B', 3, AF10) /* SDMMC2_D2 */
				  STM32_PINMUX('B', 4, AF10) /* SDMMC2_D3 */
				  STM32_PINMUX('B', 9, AF10) /* SDMMC2_D5 */
				  STM32_PINMUX('B', 14, AF10) /* SDMMC2_D0 */
				  STM32_PINMUX('B', 15, AF10) /* SDMMC2_D1 */
				  STM32_PINMUX('C', 6, AF10) /* SDMMC2_D6 */
				  STM32_PINMUX('C', 7, AF10) /* SDMMC2_D7 */
				  STM32_PINMUX('F', 0, AF10) /* SDMMC2_D4 */
				  STM32_PINMUX('G', 6, AF10) /* SDMMC2_CMD */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('E', 3, AF10)>; /* SDMMC2_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	sdmmc2_opendrain_pins: sdmmc2_opendrain-0 {
		pins1 {
			pinmux = <
				  STM32_PINMUX('B', 3, AF10) /* SDMMC2_D2 */
				  STM32_PINMUX('B', 4, AF10) /* SDMMC2_D3 */
				  STM32_PINMUX('B', 9, AF10) /* SDMMC2_D5 */
				  STM32_PINMUX('B', 14, AF10) /* SDMMC2_D0 */
				  STM32_PINMUX('B', 15, AF10) /* SDMMC2_D1 */
				  STM32_PINMUX('C', 6, AF10) /* SDMMC2_D6 */
				  STM32_PINMUX('C', 7, AF10) /* SDMMC2_D7 */
				  STM32_PINMUX('F', 0, AF10) /* SDMMC2_D4 */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('E', 3, AF10)>; /* SDMMC2_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};

		pins3 {
			pinmux = <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			bias-disable;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc2_sleep_pins: sdmmc2_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('B', 3, ANALOG) /* SDMMC2_D2 */
				  STM32_PINMUX('B', 4, ANALOG) /* SDMMC2_D3 */
				  STM32_PINMUX('B', 9, ANALOG) /* SDMMC2_D5 */
				  STM32_PINMUX('B', 14, ANALOG) /* SDMMC2_D0 */
				  STM32_PINMUX('B', 15, ANALOG) /* SDMMC2_D1 */
				  STM32_PINMUX('C', 6, ANALOG) /* SDMMC2_D6 */
				  STM32_PINMUX('C', 7, ANALOG) /* SDMMC2_D7 */
				  STM32_PINMUX('E', 3, ANALOG) /* SDMMC2_CK */
				  STM32_PINMUX('F', 0, ANALOG) /* SDMMC2_D4 */
				  STM32_PINMUX('G', 6, ANALOG) /* SDMMC2_CMD */
			>;
		};
	};

	spi1_pins: spi1-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('A', 3, AF5) /* SPI1_MOSI */
				  STM32_PINMUX('A', 5, AF5) /* SPI1_NSS */
				  STM32_PINMUX('A', 6, AF5) /* SPI1_MISO */
				  STM32_PINMUX('C', 3, AF6) /* SPI1_SCK */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	spi1_sleep_pins: spi1_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('A', 3, ANALOG) /* SPI1_MOSI */
				  STM32_PINMUX('A', 5, ANALOG) /* SPI1_NSS */
				  STM32_PINMUX('A', 6, ANALOG) /* SPI1_MISO */
				  STM32_PINMUX('C', 3, ANALOG) /* SPI1_SCK */
			>;
		};
	};

	spi5_pins: spi5-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('E', 4, AF1) /* SPI5_MISO */
				  STM32_PINMUX('F', 6, AF5) /* SPI5_NSS */
				  STM32_PINMUX('G', 10, AF5) /* SPI5_SCK */
				  STM32_PINMUX('H', 12, AF5) /* SPI5_MOSI */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	spi5_sleep_pins: spi5_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('E', 4, ANALOG) /* SPI5_MISO */
				  STM32_PINMUX('F', 6, ANALOG) /* SPI5_NSS */
				  STM32_PINMUX('G', 10, ANALOG) /* SPI5_SCK */
				  STM32_PINMUX('H', 12, ANALOG) /* SPI5_MOSI */
			>;
		};
	};

	uart4_pins: uart4-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 6, AF8)>; /* UART4_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('D', 8, AF8)>; /* UART4_RX */
			bias-disable;
		};
	};

	uart4_sleep_pins: uart4_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('D', 6, ANALOG) /* UART4_TX */
				  STM32_PINMUX('D', 8, ANALOG) /* UART4_RX */
			>;
		};
	};

	usart2_pins: usart2-0 {
		pins1 {
			pinmux = <
				  STM32_PINMUX('D', 3, AF3) /* USART2_CTS */
				  STM32_PINMUX('F', 4, AF3) /* USART2_RX */
			>;
			bias-disable;
		};

		pins2 {
			pinmux = <
				  STM32_PINMUX('D', 4, AF3) /* USART2_RTS */
				  STM32_PINMUX('F', 13, AF7) /* USART2_TX */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	usart2_sleep_pins: usart2_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('D', 3, ANALOG) /* USART2_CTS */
				  STM32_PINMUX('D', 4, ANALOG) /* USART2_RTS */
				  STM32_PINMUX('F', 4, ANALOG) /* USART2_RX */
				  STM32_PINMUX('F', 13, ANALOG) /* USART2_TX */
			>;
		};
	};

	usart3_pins: usart3-0 {
		pins1 {
			pinmux = <STM32_PINMUX('G', 11, AF7)>; /* USART3_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('G', 4, AF8)>; /* USART3_RX */
			bias-disable;
		};
	};

	usart3_sleep_pins: usart3_sleep-0 {
		pins {
			pinmux = <
				  STM32_PINMUX('G', 4, ANALOG) /* USART3_RX */
				  STM32_PINMUX('G', 11, ANALOG) /* USART3_TX */
			>;
		};
	};

	usb_otg_hs_pins: usb_otg_hs-0 {
		pins {
			pinmux = <STM32_PINMUX('I', 7, ANALOG)>; /* USB_OTG_HS_VBUS */
		};
	};

	usb_otg_hs_sleep_pins: usb_otg_hs_sleep-0 {
		pins {
			pinmux = <STM32_PINMUX('I', 7, ANALOG)>; /* USB_OTG_HS_VBUS */
		};
	};
};
