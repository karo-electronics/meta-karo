diff --git a/drivers/regulator/rpi-panel-attiny-regulator.c b/drivers/regulator/rpi-panel-attiny-regulator.c
index 308f7972941b..9763b20ddf4f 100644
--- a/drivers/regulator/rpi-panel-attiny-regulator.c
+++ b/drivers/regulator/rpi-panel-attiny-regulator.c
@@ -92,12 +92,16 @@ static u8 attiny_get_port_state(struct attiny_lcd *state, int reg)
 
 static int attiny_lcd_power_enable(struct regulator_dev *rdev)
 {
+	int ret;
 	struct attiny_lcd *state = rdev_get_drvdata(rdev);
 
 	mutex_lock(&state->lock);
 
 	/* Ensure bridge, and tp stay in reset */
-	attiny_set_port_state(state, REG_PORTC, 0);
+	ret = attiny_set_port_state(state, REG_PORTC, 0);
+	if (ret)
+		goto out;
+
 	usleep_range(5000, 10000);
 
 	/* Default to the same orientation as the closed source
@@ -105,40 +109,61 @@ static int attiny_lcd_power_enable(struct regulator_dev *rdev)
 	 * configuration will be supported using VC4's plane
 	 * orientation bits.
 	 */
-	attiny_set_port_state(state, REG_PORTA, PA_LCD_LR);
+	ret = attiny_set_port_state(state, REG_PORTA, PA_LCD_LR);
+	if (ret)
+		goto out;
+
 	usleep_range(5000, 10000);
 	/* Main regulator on, and power to the panel (LCD_VCC_N) */
-	attiny_set_port_state(state, REG_PORTB, PB_LCD_MAIN);
+	ret = attiny_set_port_state(state, REG_PORTB, PB_LCD_MAIN);
+	if (ret)
+		goto out;
+
 	usleep_range(5000, 10000);
 	/* Bring controllers out of reset */
-	attiny_set_port_state(state, REG_PORTC, PC_LED_EN);
+	ret = attiny_set_port_state(state, REG_PORTC, PC_LED_EN);
+	if (ret)
+		goto out;
 
 	msleep(80);
-
+out:
 	mutex_unlock(&state->lock);
 
-	return 0;
+	return ret;
 }
 
 static int attiny_lcd_power_disable(struct regulator_dev *rdev)
 {
+	int ret;
 	struct attiny_lcd *state = rdev_get_drvdata(rdev);
 
 	mutex_lock(&state->lock);
 
-	regmap_write(rdev->regmap, REG_PWM, 0);
+	ret = regmap_write(rdev->regmap, REG_PWM, 0);
+	if (ret)
+		goto out;
+
 	usleep_range(5000, 10000);
 
-	attiny_set_port_state(state, REG_PORTA, 0);
+	ret = attiny_set_port_state(state, REG_PORTA, 0);
+	if (ret)
+		goto out;
+
 	usleep_range(5000, 10000);
-	attiny_set_port_state(state, REG_PORTB, PB_LCD_VCC_N);
+	ret = attiny_set_port_state(state, REG_PORTB, PB_LCD_VCC_N);
+	if (ret)
+		goto out;
+
 	usleep_range(5000, 10000);
-	attiny_set_port_state(state, REG_PORTC, 0);
-	msleep(30);
+	ret = attiny_set_port_state(state, REG_PORTC, 0);
+	if (ret)
+		goto out;
 
+	msleep(30);
+out:
 	mutex_unlock(&state->lock);
 
-	return 0;
+	return ret;
 }
 
 static int attiny_lcd_power_is_enabled(struct regulator_dev *rdev)
@@ -228,21 +253,34 @@ static void attiny_gpio_set(struct gpio_chip *gc, unsigned int off, int val)
 	else
 		last_val &= ~mappings[off].mask;
 
-	attiny_set_port_state(state, mappings[off].reg, last_val);
+	ret = attiny_set_port_state(state, mappings[off].reg, last_val);
+	if (ret)
+		goto out;
 
 	if (off == RST_BRIDGE_N && val) {
 		usleep_range(5000, 8000);
-		regmap_write(state->regmap, REG_ADDR_H, 0x04);
+		ret = regmap_write(state->regmap, REG_ADDR_H, 0x04);
+		if (ret)
+			goto out;
+
 		usleep_range(5000, 8000);
-		regmap_write(state->regmap, REG_ADDR_L, 0x7c);
+		ret = regmap_write(state->regmap, REG_ADDR_L, 0x7c);
+		if (ret)
+			goto out;
+
 		usleep_range(5000, 8000);
-		regmap_write(state->regmap, REG_WRITE_DATA_H, 0x00);
+		ret = regmap_write(state->regmap, REG_WRITE_DATA_H, 0x00);
+		if (ret)
+			goto out;
+
 		usleep_range(5000, 8000);
-		regmap_write(state->regmap, REG_WRITE_DATA_L, 0x00);
+		ret = regmap_write(state->regmap, REG_WRITE_DATA_L, 0x00);
+		if (ret)
+			goto out;
 
 		msleep(100);
 	}
-
+out:
 	mutex_unlock(&state->lock);
 }
 
@@ -283,7 +321,7 @@ static int attiny_i2c_read(struct i2c_client *client, u8 reg, unsigned int *buf)
  * I2C driver interface functions
  */
 static int attiny_i2c_probe(struct i2c_client *i2c,
-		const struct i2c_device_id *id)
+			    const struct i2c_device_id *id)
 {
 	struct backlight_properties props = { };
 	struct regulator_config config = { };
@@ -293,6 +331,7 @@ static int attiny_i2c_probe(struct i2c_client *i2c,
 	struct regmap *regmap;
 	unsigned int data;
 	int ret;
+	int limit = 10;
 
 	state = devm_kzalloc(&i2c->dev, sizeof(*state), GFP_KERNEL);
 	if (!state)
@@ -318,6 +357,7 @@ static int attiny_i2c_probe(struct i2c_client *i2c,
 	switch (data) {
 	case 0xde: /* ver 1 */
 	case 0xc3: /* ver 2 */
+		dev_info(&i2c->dev, "Found Atmel firmware 0x%02x\n", data);
 		break;
 	default:
 		dev_err(&i2c->dev, "Unknown Atmel firmware revision: 0x%02x\n", data);
@@ -325,9 +365,23 @@ static int attiny_i2c_probe(struct i2c_client *i2c,
 		goto error;
 	}
 
-	regmap_write(regmap, REG_POWERON, 0);
-	msleep(30);
-	regmap_write(regmap, REG_PWM, 0);
+	ret = regmap_write(regmap, REG_POWERON, 0);
+	if (ret)
+		goto error;
+
+	/* Wait for nPWRDWN to go low to indicate poweron is done. */
+	do {
+		ret = regmap_read_poll_timeout(rdev->regmap, REG_PORTB, data,
+					       data & BIT(0), 10, 30000);
+	} while (ret == -ENXIO && --limit > 0);
+	dev_info(&i2c->dev, "PWRON %sOK after %u loops\n", ret == 0 ? "" : "NOT ",
+		 10 - limit);
+	if (ret)
+		return ret;
+
+	ret = regmap_write(regmap, REG_PWM, 0);
+	if (ret)
+		goto error;
 
 	config.dev = &i2c->dev;
 	config.regmap = regmap;
@@ -352,10 +406,17 @@ static int attiny_i2c_probe(struct i2c_client *i2c,
 					    &props);
 	if (IS_ERR(bl)) {
 		ret = PTR_ERR(bl);
+		dev_err(&i2c->dev, "failed to register backlight device: %d\n", ret);
 		goto error;
 	}
 
-	bl->props.brightness = 0xff;
+	bl->props.brightness = props.max_brightness;
+	of_property_read_u32(i2c->dev.of_node, "default-brightness-level",
+			     &bl->props.brightness);
+
+	ret = attiny_update_status();
+	if (ret)
+		goto error;
 
 	state->gc.parent = &i2c->dev;
 	state->gc.label = i2c->name;
@@ -390,7 +451,7 @@ static void attiny_i2c_remove(struct i2c_client *client)
 
 static const struct of_device_id attiny_dt_ids[] = {
 	{ .compatible = "raspberrypi,7inch-touchscreen-panel-regulator" },
-	{},
+	{}
 };
 MODULE_DEVICE_TABLE(of, attiny_dt_ids);
 
