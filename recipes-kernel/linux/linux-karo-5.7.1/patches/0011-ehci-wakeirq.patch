Index: karo-tx-linux/drivers/usb/host/ehci-platform.c
===================================================================
--- karo-tx-linux.orig/drivers/usb/host/ehci-platform.c
+++ karo-tx-linux/drivers/usb/host/ehci-platform.c
@@ -28,6 +28,7 @@
 #include <linux/module.h>
 #include <linux/of.h>
 #include <linux/platform_device.h>
+#include <linux/pm_wakeirq.h>
 #include <linux/reset.h>
 #include <linux/sys_soc.h>
 #include <linux/timer.h>
@@ -45,6 +46,7 @@
 struct ehci_platform_priv {
 	struct clk *clks[EHCI_MAX_CLKS];
 	struct reset_control *rsts;
+	int wakeirq;
 	bool reset_on_resume;
 	bool quirk_poll;
 	struct timer_list poll_timer;
@@ -356,6 +358,16 @@ static int ehci_platform_probe(struct pl
 	if (err)
 		goto err_power;
 
+	priv->wakeirq = platform_get_irq(dev, 1);
+	if (priv->wakeirq > 0) {
+		err = dev_pm_set_dedicated_wake_irq(hcd->self.controller,
+						    priv->wakeirq);
+		if (err)
+			goto err_hcd;
+	} else if (priv->wakeirq == -EPROBE_DEFER) {
+		goto err_hcd;
+	}
+
 	device_wakeup_enable(hcd->self.controller);
 	device_enable_async_suspend(hcd->self.controller);
 	platform_set_drvdata(dev, hcd);
@@ -365,6 +377,8 @@ static int ehci_platform_probe(struct pl
 
 	return err;
 
+err_hcd:
+	usb_remove_hcd(hcd);
 err_power:
 	if (pdata->power_off)
 		pdata->power_off(dev);
@@ -391,6 +405,8 @@ static int ehci_platform_remove(struct p
 
 	if (priv->quirk_poll)
 		quirk_poll_end(priv);
+	if (priv->wakeirq > 0)
+		dev_pm_clear_wake_irq(hcd->self.controller);
 
 	usb_remove_hcd(hcd);
 
@@ -422,6 +438,9 @@ static int ehci_platform_suspend(struct
 
 	if (priv->quirk_poll)
 		quirk_poll_end(priv);
+	if (priv->wakeirq > 0 &&
+	    (do_wakeup || dev->power.wakeup_path))
+		enable_irq_wake(priv->wakeirq);
 
 	ret = ehci_suspend(hcd, do_wakeup);
 	if (ret)
@@ -457,6 +476,9 @@ static int ehci_platform_resume(struct d
 
 	if (priv->quirk_poll)
 		quirk_poll_init(priv);
+	if (priv->wakeirq > 0 &&
+	    (device_may_wakeup(dev) || dev->power.wakeup_path))
+		disable_irq_wake(priv->wakeirq);
 
 	return 0;
 }
