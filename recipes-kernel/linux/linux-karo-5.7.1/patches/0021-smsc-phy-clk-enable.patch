commit bedd8d78aba300860cec3f85d6ff549b3b7f2679
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Wed Sep 9 15:45:00 2020 +0200

    net: phy: smsc: LAN8710/20: add phy refclk in support
    
    Add support to specify the clock provider for the PHY refclk and don't
    rely on 'magic' host clock setup. [1] tried to address this by
    introducing a flag and fixing the corresponding host. But this commit
    breaks the IRQ support since the irq setup during .config_intr() is
    thrown away because the reset comes from the side without respecting the
    current PHY state within the PHY library state machine. Furthermore the
    commit fixed the problem only for FEC based hosts other hosts acting
    like the FEC are not covered.
    
    This commit goes the other way around to address the bug fixed by [1].
    Instead of resetting the device from the side every time the refclk gets
    (re-)enabled it requests and enables the clock till the device gets
    removed. Now the PHY library is the only place where the PHY gets reset
    to respect the PHY library state machine.
    
    [1] commit 7f64e5b18ebb ("net: phy: smsc: LAN8710/20: add
        PHY_RST_AFTER_CLK_EN flag")
    
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/phy/smsc.c b/drivers/net/phy/smsc.c
index 0bcdf927a790..f181c1d1d17b 100644
--- a/drivers/net/phy/smsc.c
+++ b/drivers/net/phy/smsc.c
@@ -12,6 +12,7 @@
  *
  */
 
+#include <linux/clk.h>
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/mii.h>
@@ -33,6 +34,7 @@ static struct smsc_hw_stat smsc_hw_stats[] = {
 
 struct smsc_phy_priv {
 	bool energy_enable;
+	struct clk *refclk;
 };
 
 static int smsc_phy_config_intr(struct phy_device *phydev)
@@ -182,11 +184,20 @@ static void smsc_get_stats(struct phy_device *phydev,
 		data[i] = smsc_get_stat(phydev, i);
 }
 
+static void smsc_phy_remove(struct phy_device *phydev)
+{
+	struct smsc_phy_priv *priv = phydev->priv;
+
+	clk_disable_unprepare(priv->refclk);
+	clk_put(priv->refclk);
+}
+
 static int smsc_phy_probe(struct phy_device *phydev)
 {
 	struct device *dev = &phydev->mdio.dev;
 	struct device_node *of_node = dev->of_node;
 	struct smsc_phy_priv *priv;
+	int ret;
 
 	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
 	if (!priv)
@@ -199,6 +210,22 @@ static int smsc_phy_probe(struct phy_device *phydev)
 
 	phydev->priv = priv;
 
+	/* Make clk optional to keep DTB backward compatibility. */
+	priv->refclk = clk_get_optional(dev, NULL);
+	if (IS_ERR(priv->refclk)) {
+		ret = PTR_ERR(priv->refclk);
+		if (ret != -EPROBE_DEFER)
+			dev_err(dev, "Failed to request clock: %d\n", ret);
+		return ret;
+	}
+	ret = clk_prepare_enable(priv->refclk);
+	if (ret)
+		return ret;
+
+	ret = clk_set_rate(priv->refclk, 50 * 1000 * 1000);
+	if (ret)
+		return ret;
+
 	return 0;
 }
 
@@ -295,9 +322,9 @@ static struct phy_driver smsc_phy_driver[] = {
 	.name		= "SMSC LAN8710/LAN8720",
 
 	/* PHY_BASIC_FEATURES */
-	.flags		= PHY_RST_AFTER_CLK_EN,
 
 	.probe		= smsc_phy_probe,
+	.remove		= smsc_phy_remove,
 
 	/* basic functions */
 	.read_status	= lan87xx_read_status,
