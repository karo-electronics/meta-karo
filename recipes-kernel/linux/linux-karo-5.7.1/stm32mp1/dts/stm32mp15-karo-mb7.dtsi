// SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)

/ {
	aliases {
		display = &lcd_panel;
	};

	clocks {
		#address-cells = <1>;
		#size-cells = <0>;

		mclk: clock@0 {
			compatible = "fixed-clock";
			#clock-cells = <0>;
			reg = <0>;
			clock-frequency = <26000000>;
		};
	};

	lcd_backlight: lcd-backlight {
		compatible = "pwm-backlight";
		pinctrl-names = "default", "sleep";
		pwms = <&txmp_pwm1 2 500000 PWM_POLARITY_INVERTED>;
		pinctrl-0 = <&txmp_pwm1_pins>;
		pinctrl-1 = <&txmp_pwm1_sleep_pins>;
		brightness-levels = < 1  2  3  4  5  6  7  8  9  10
				     11 12 13 14 15 16 17 18 19  20
				     21 22 23 24 25 26 27 28 29  30
				     31 32 33 34 35 36 37 38 39  40
				     41 42 43 44 45 46 47 48 49  50
				     51 52 53 54 55 56 57 58 59  60
				     61 62 63 64 65 66 67 68 69  70
				     71 72 73 74 75 76 77 78 79  80
				     81 82 83 84 85 86 87 88 89  90
				     91 92 93 94 95 96 97 98 99 100
				    >;
		default-brightness-level = <50>;
	};

	lcd_panel: panel {
		compatible = "panel-dpi";
		pinctrl-0 = <&txmp_ltdc_pins>;
		pinctrl-1 = <&txmp_ltdc_sleep_pins>;
		backlight = <&lcd_backlight>;
		enable-gpios = <&gpiod 15 GPIO_ACTIVE_HIGH>;
		reset-gpios = <&gpioe 1 GPIO_ACTIVE_HIGH>;
		power-supply = <&reg_3v3>;
		data-mapping = "rgb24";
		status = "okay";

		panel-timing {
			clock-frequency = <25200000>;
			hactive = <640>;
			vactive = <480>;
			hback-porch = <114>;
			hsync-len = <30>;
			hfront-porch = <16>;
			vback-porch = <32>;
			vsync-len = <3>;
			vfront-porch = <10>;
			hsync-active = <0>;
			vsync-active = <0>;
			de-active = <1>;
			pixelclk-active = <1>;
		};

		port {
			panel_in: endpoint {
				remote-endpoint = <&ltdc_ep1_out>;
			};
		};

		display-timings {
			VGA: VGA {
				clock-frequency = <25200000>;
				hactive = <640>;
				vactive = <480>;
				hback-porch = <48>;
				hsync-len = <96>;
				hfront-porch = <16>;
				vback-porch = <31>;
				vsync-len = <2>;
				vfront-porch = <12>;
				hsync-active = <0>;
				vsync-active = <0>;
				de-active = <1>;
				pixelclk-active = <0>;
			};

			ETV570: ETV570 {
				u-boot,panel-name = "edt,et057090dhu";
				clock-frequency = <25200000>;
				hactive = <640>;
				vactive = <480>;
				hback-porch = <114>;
				hsync-len = <30>;
				hfront-porch = <16>;
				vback-porch = <32>;
				vsync-len = <3>;
				vfront-porch = <10>;
				hsync-active = <0>;
				vsync-active = <0>;
				de-active = <1>;
				pixelclk-active = <1>;
			};

			ET0350: ET0350 {
				u-boot,panel-name = "edt,et0350g0dh6";
				clock-frequency = <6413760>;
				hactive = <320>;
				vactive = <240>;
				hback-porch = <34>;
				hsync-len = <34>;
				hfront-porch = <20>;
				vback-porch = <15>;
				vsync-len = <3>;
				vfront-porch = <4>;
				hsync-active = <0>;
				vsync-active = <0>;
				de-active = <1>;
				pixelclk-active = <0>;
			};

			ET0430: ET0430 {
				u-boot,panel-name = "edt,et0430g0dh6";
				clock-frequency = <9009000>;
				hactive = <480>;
				vactive = <272>;
				hback-porch = <2>;
				hsync-len = <41>;
				hfront-porch = <2>;
				vback-porch = <2>;
				vsync-len = <10>;
				vfront-porch = <2>;
				hsync-active = <0>;
				vsync-active = <0>;
				de-active = <1>;
				pixelclk-active = <1>;
			};

			ET0500: ET0500 {
				clock-frequency = <33264000>;
				hactive = <800>;
				vactive = <480>;
				hback-porch = <88>;
				hsync-len = <128>;
				hfront-porch = <40>;
				vback-porch = <33>;
				vsync-len = <2>;
				vfront-porch = <10>;
				hsync-active = <0>;
				vsync-active = <0>;
				de-active = <1>;
				pixelclk-active = <0>;
			};

			ET0700: ET0700 { /* same as ET0500 */
				u-boot,panel-name = "edt,etm0700g0dh6";
				clock-frequency = <33264000>;
				hactive = <800>;
				vactive = <480>;
				hback-porch = <88>;
				hsync-len = <128>;
				hfront-porch = <40>;
				vback-porch = <33>;
				vsync-len = <2>;
				vfront-porch = <10>;
				hsync-active = <0>;
				vsync-active = <0>;
				de-active = <1>;
				pixelclk-active = <0>;
			};

			ETQ570: ETQ570 {
				clock-frequency = <6596040>;
				hactive = <320>;
				vactive = <240>;
				hback-porch = <38>;
				hsync-len = <30>;
				hfront-porch = <30>;
				vback-porch = <16>;
				vsync-len = <3>;
				vfront-porch = <4>;
				hsync-active = <0>;
				vsync-active = <0>;
				de-active = <1>;
				pixelclk-active = <0>;
			};
		};
	};

	reg_2v5: regulator-2v5 {
		compatible = "regulator-fixed";
		regulator-name = "2v5";
		regulator-min-microvolt = <2500000>;
		regulator-max-microvolt = <2500000>;
		regulator-always-on;
	};

	sound {
		compatible = "karo,stm32mp15-sgtl5000",
			     "audio-graph-card";
		label = "TXMP-SGTL5000";
		widgets =
			"Microphone", "Mic Jack",
			"Line", "Line In",
			"Line", "Line Out",
			"Headphone", "Headphone Jack";
		routing =
			"MIC_IN", "Mic Jack",
			"Mic Jack", "Mic Bias",
			"Headphone Jack", "HP_OUT";
		dais = <&sai2a_port>;
		status = "okay";
	};
};

&i2c6 {
	status = "okay";

	sgtl5000: codec@a {
		compatible = "fsl,sgtl5000";
		#sound-dai-cells = <0>;
		reg = <0xa>;
		VDDA-supply = <&reg_2v5>;
		VDDIO-supply = <&reg_3v3>;
		clocks = <&mclk>;
		status = "okay";

		port {
			sgtl5000_in: endpoint {
				remote-endpoint = <&sai2_out>;
			};
		};
	};

	polytouch: touchpanel@38 {
		compatible = "edt,edt-ft5x06";
		reg = <0x38>;
		interrupt-parent = <&gpiod>;
		interrupts = <6 IRQ_TYPE_EDGE_FALLING>;
		reset-gpios = <&gpiod 14 GPIO_ACTIVE_LOW>; /* Pin 149 */
		wake-gpios = <&gpioe 2 GPIO_ACTIVE_HIGH>; /* Pin 152 */
		wakeup-source;
		status = "okay";
	};

	rtc_i2c: rtc@6f {
		compatible = "microchip,mcp7940x";
		reg = <0x6f>;
		status = "okay";
	};
};

&ltdc {
	status = "okay";

	port {
		#address-cells = <1>;
		#size-cells = <0>;

		ltdc_ep1_out: endpoint@1 {
			reg = <1>;
			remote-endpoint = <&panel_in>;
		};
	};
};

&sai2 {
	clocks = <&rcc SAI2>, <&rcc PLL3_Q>, <&rcc PLL3_R>;
	clock-names = "pclk", "x8k", "x11k";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&txmp_sai2_pins>;
	pinctrl-1 = <&txmp_sai2_sleep_pins>;
	status = "okay";
};

&sai2a {
	#clock-cells = <0>;
	dma-names = "tx";
	status = "okay";

	sai2a_port: port {
		sai2_out: endpoint {
			remote-endpoint = <&sgtl5000_in>;
			dai-format = "i2s";
			bitclock-master = <&sgtl5000>;
			mclk-fs = <256>;
		};
	};
};

&sdmmc3 {
	/* not usable due to pinswap of SDMMC3_CMD and SDMMC3_D0 */
	status = "disabled";
};

&timers1 {
	status = "okay";

	txmp_pwm1: pwm {
		status = "okay";
	};
};

&pinctrl {
	txmp_ltdc_pins: txmp-ltdc-pins {
		pins1 {
			pinmux = <
				  /* LCD_R0 is not connected! */
				  STM32_PINMUX('G',  9, AF14) /* LCD_R1 */
				  STM32_PINMUX('C', 10, AF14) /* LCD_R2 */
				  STM32_PINMUX('B',  0,  AF9) /* LCD_R3 */
				  STM32_PINMUX('A',  5, AF14) /* LCD_R4 */
				  STM32_PINMUX('C',  0, AF14) /* LCD_R5 */
				  STM32_PINMUX('B',  1,  AF9) /* LCD_R6 */
				  STM32_PINMUX('E', 15, AF14) /* LCD_R7 */
				  STM32_PINMUX('E', 14, AF13) /* LCD_G0 */
				  STM32_PINMUX('E',  6, AF14) /* LCD_G1 */
				  STM32_PINMUX('A',  6, AF14) /* LCD_G2 */
				  STM32_PINMUX('E', 11, AF14) /* LCD_G3 */
				  STM32_PINMUX('B', 10, AF14) /* LCD_G4 */
				  STM32_PINMUX('F', 11, AF14) /* LCD_G5 */
				  STM32_PINMUX('C',  7, AF14) /* LCD_G6 */
				  STM32_PINMUX('D',  3, AF14) /* LCD_G7 */
				  STM32_PINMUX('D',  9, AF14) /* LCD_B0 */
				  STM32_PINMUX('G', 12, AF14) /* LCD_B1 */
				  STM32_PINMUX('G', 10, AF14) /* LCD_B2 */
				  STM32_PINMUX('D', 10, AF14) /* LCD_B3 */
				  STM32_PINMUX('E', 12, AF14) /* LCD_B4 */
				  STM32_PINMUX('A',  3, AF14) /* LCD_B5 */
				  STM32_PINMUX('B',  8, AF14) /* LCD_B6 */
				  STM32_PINMUX('D',  8, AF14) /* LCD_B7 */
				>;
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('G',  7, AF14) /* LCD_CLK */
				  STM32_PINMUX('C',  6, AF14) /* LCD_HSYNC */
				  STM32_PINMUX('A',  4, AF14) /* LCD_VSYNC */
				>;
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};

		pins3 {
			pinmux = <
				  STM32_PINMUX('E', 13, AF14) /* LCD_DE */
				>;
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	txmp_ltdc_sleep_pins: txmp-lcd-sleep-pins {
		pins {
			pinmux = <
				  STM32_PINMUX('G',  7, ANALOG) /* LCD_CLK */
				  STM32_PINMUX('C',  6, ANALOG) /* LCD_HSYNC */
				  STM32_PINMUX('A',  4, ANALOG) /* LCD_VSYNC */
				  STM32_PINMUX('E', 13, ANALOG) /* LCD_DE */
				  /* LCD_R0 is not connected! */
				  STM32_PINMUX('G',  9, ANALOG) /* LCD_R1 */
				  STM32_PINMUX('C', 10, ANALOG) /* LCD_R2 */
				  STM32_PINMUX('B',  0, ANALOG) /* LCD_R3 */
				  STM32_PINMUX('A',  5, ANALOG) /* LCD_R4 */
				  STM32_PINMUX('C',  0, ANALOG) /* LCD_R5 */
				  STM32_PINMUX('B',  1, ANALOG) /* LCD_R6 */
				  STM32_PINMUX('E', 15, ANALOG) /* LCD_R7 */
				  STM32_PINMUX('E', 14, ANALOG) /* LCD_G0 */
				  STM32_PINMUX('E',  6, ANALOG) /* LCD_G1 */
				  STM32_PINMUX('A',  6, ANALOG) /* LCD_G2 */
				  STM32_PINMUX('E', 11, ANALOG) /* LCD_G3 */
				  STM32_PINMUX('B', 10, ANALOG) /* LCD_G4 */
				  STM32_PINMUX('F', 11, ANALOG) /* LCD_G5 */
				  STM32_PINMUX('C',  7, ANALOG) /* LCD_G6 */
				  STM32_PINMUX('D',  3, ANALOG) /* LCD_G7 */
				  STM32_PINMUX('D',  9, ANALOG) /* LCD_B0 */
				  STM32_PINMUX('G', 12, ANALOG) /* LCD_B1 */
				  STM32_PINMUX('G', 10, ANALOG) /* LCD_B2 */
				  STM32_PINMUX('D', 10, ANALOG) /* LCD_B3 */
				  STM32_PINMUX('E', 12, ANALOG) /* LCD_B4 */
				  STM32_PINMUX('A',  3, ANALOG) /* LCD_B5 */
				  STM32_PINMUX('B',  8, ANALOG) /* LCD_B6 */
				  STM32_PINMUX('D',  8, ANALOG) /* LCD_B7 */
				>;
		};
	};

	txmp_pwm1_pins: txmp-pwm1-pins {
		pins {
			pinmux = <STM32_PINMUX('A', 10, AF1)>; /* TIM1_CH3 */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	txmp_pwm1_sleep_pins: txmp-pwm1-sleep-pins {
		pins {
			pinmux = <STM32_PINMUX('A', 10, ANALOG)>; /* TIM1_CH3 */
		};
	};

	txmp_sai2_pins: txmp-sai2-pins {
		pins1 {
			pinmux = <
				  STM32_PINMUX('D', 11, AF10)	/* TXD */
				  STM32_PINMUX('D', 12, AF10)	/* FS */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};

		pins2 {
			pinmux = <
				  STM32_PINMUX('A', 0, AF10)	/* RXD */
				  STM32_PINMUX('D', 13, AF10)	/* SCK */
			>;
		};
	};

	txmp_sai2_sleep_pins: txmp-sai2-sleep-pins {
		pins {
			pinmux = <
				  STM32_PINMUX('A', 0, ANALOG)	/* RXD */
				  STM32_PINMUX('D', 11, ANALOG)	/* TXD */
				  STM32_PINMUX('D', 13, ANALOG)	/* SCK */
				  STM32_PINMUX('D', 12, ANALOG)	/* FS */
			>;
		};
	};
};
