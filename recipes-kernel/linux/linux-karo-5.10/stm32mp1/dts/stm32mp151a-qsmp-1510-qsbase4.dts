// SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
/*
 * Copyright (C) 2022 Lothar Wa√ümann <LW@KARO-electronics.de>
 */

#include "stm32mp151a-qsmp-1510.dts"

/ {
	model = "Ka-Ro electronics GmbH QSMP-1510 module on QSBASE4 baseboard";

	aliases {
		display = &lcd_panel;
	};

	lcd_backlight: lcd-backlight {
		compatible = "pwm-backlight";
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&qsmp_pwm2_pins>;
		pinctrl-1 = <&qsmp_pwm2_sleep_pins>;
		pwms = <&qsmp_pwm2 0 500000 PWM_POLARITY_INVERTED>;
		brightness-levels = <0 1  2  3  4  5  6  7  8  9  10
				     11 12 13 14 15 16 17 18 19  20
				     21 22 23 24 25 26 27 28 29  30
				     31 32 33 34 35 36 37 38 39  40
				     41 42 43 44 45 46 47 48 49  50
				     51 52 53 54 55 56 57 58 59  60
				     61 62 63 64 65 66 67 68 69  70
				     71 72 73 74 75 76 77 78 79  80
				     81 82 83 84 85 86 87 88 89  90
				     91 92 93 94 95 96 97 98 99 100
				    >;
		default-brightness-level = <50>;
	};

	lcd_panel: panel {
		compatible = "panel-dpi";
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&qsmp_ltdc_pins>;
		pinctrl-1 = <&qsmp_ltdc_sleep_pins>;
		enable-gpios = <&gpioa 10 GPIO_ACTIVE_HIGH>;
		backlight = <&lcd_backlight>;
		power-supply = <&reg_3v3>;
		data-mapping = "rgb24";
		status = "okay";

		panel-timing {
			clock-frequency = <25200000>;
			hactive = <640>;
			vactive = <480>;
			hback-porch = <114>;
			hsync-len = <30>;
			hfront-porch = <16>;
			vback-porch = <32>;
			vsync-len = <3>;
			vfront-porch = <10>;
			hsync-active = <0>;
			vsync-active = <0>;
			de-active = <1>;
			pixelclk-active = <1>;
		};

		port {
			lcd_panel_from_ltdc_ep0: endpoint {
				remote-endpoint = <&ltdc_ep0_to_lcd_panel>;
			};
		};

		display-timings {
			VGA: VGA {
				clock-frequency = <25200000>;
				hactive = <640>;
				vactive = <480>;
				hback-porch = <48>;
				hsync-len = <96>;
				hfront-porch = <16>;
				vback-porch = <31>;
				vsync-len = <2>;
				vfront-porch = <12>;
				hsync-active = <0>;
				vsync-active = <0>;
				de-active = <1>;
				pixelclk-active = <0>;
			};

			ETV570: ETV570 {
				u-boot,panel-name = "edt,et057090dhu";
				clock-frequency = <25200000>;
				hactive = <640>;
				vactive = <480>;
				hback-porch = <114>;
				hsync-len = <30>;
				hfront-porch = <16>;
				vback-porch = <32>;
				vsync-len = <3>;
				vfront-porch = <10>;
				hsync-active = <0>;
				vsync-active = <0>;
				de-active = <1>;
				pixelclk-active = <1>;
			};

			ET0350: ET0350 {
				u-boot,panel-name = "edt,et0350g0dh6";
				clock-frequency = <6413760>;
				hactive = <320>;
				vactive = <240>;
				hback-porch = <34>;
				hsync-len = <34>;
				hfront-porch = <20>;
				vback-porch = <15>;
				vsync-len = <3>;
				vfront-porch = <4>;
				hsync-active = <0>;
				vsync-active = <0>;
				de-active = <1>;
				pixelclk-active = <0>;
			};

			ET0430: ET0430 {
				u-boot,panel-name = "edt,et0430g0dh6";
				clock-frequency = <9009000>;
				hactive = <480>;
				vactive = <272>;
				hback-porch = <2>;
				hsync-len = <41>;
				hfront-porch = <2>;
				vback-porch = <2>;
				vsync-len = <10>;
				vfront-porch = <2>;
				hsync-active = <0>;
				vsync-active = <0>;
				de-active = <1>;
				pixelclk-active = <1>;
			};

			ET0500: ET0500 {
				clock-frequency = <33264000>;
				hactive = <800>;
				vactive = <480>;
				hback-porch = <88>;
				hsync-len = <128>;
				hfront-porch = <40>;
				vback-porch = <33>;
				vsync-len = <2>;
				vfront-porch = <10>;
				hsync-active = <0>;
				vsync-active = <0>;
				de-active = <1>;
				pixelclk-active = <0>;
			};

			ET0700: ET0700 { /* same as ET0500 */
				u-boot,panel-name = "edt,etm0700g0dh6";
				clock-frequency = <33264000>;
				hactive = <800>;
				vactive = <480>;
				hback-porch = <88>;
				hsync-len = <128>;
				hfront-porch = <40>;
				vback-porch = <33>;
				vsync-len = <2>;
				vfront-porch = <10>;
				hsync-active = <0>;
				vsync-active = <0>;
				de-active = <1>;
				pixelclk-active = <0>;
			};

			ETQ570: ETQ570 {
				clock-frequency = <6596040>;
				hactive = <320>;
				vactive = <240>;
				hback-porch = <38>;
				hsync-len = <30>;
				hfront-porch = <30>;
				vback-porch = <16>;
				vsync-len = <3>;
				vfront-porch = <4>;
				hsync-active = <0>;
				vsync-active = <0>;
				de-active = <1>;
				pixelclk-active = <0>;
			};
		};
	};
};

&ethernet0 {
	pinctrl-0 = <&qsmp_ethernet0_rgmii_pins>;
	pinctrl-1 = <&qsmp_ethernet0_rgmii_sleep_pins>;
	phy-mode = "rgmii-id";
	phy-handle = <&phy0>;
};

&i2c6 {
	status = "okay";

	polytouch: touchpanel@38 {
		compatible = "edt,edt-ft5x06";
		reg = <0x38>;
		interrupt-parent = <&gpiod>;
		interrupts = <6 IRQ_TYPE_EDGE_FALLING>;
		reset-gpios = <&gpiod 14 GPIO_ACTIVE_LOW>; /* Pin 149 */
		wake-gpios = <&gpioe 2 GPIO_ACTIVE_HIGH>; /* Pin 152 */
		wakeup-source;
		status = "okay";
	};
};

&ltdc {
	status = "okay";

	port {
		ltdc_ep0_to_lcd_panel: endpoint@0 {
			reg = <0>;
			remote-endpoint = <&lcd_panel_from_ltdc_ep0>;
		};
	};
};

&mdio0 {
	phy0: ethernet-phy@7 {
		reg = <7>;
		interrupt-parent = <&gpioa>;
		interrupts = <9 IRQ_TYPE_EDGE_FALLING>;
		micrel,force-master;
	};
};

&timers2 {
	status = "okay";

	qsmp_pwm2: pwm {
		status = "okay";
	};

	timer@1 {
		status = "okay";
	};
};

&uart4_pins {
	pins1 {
		/delete-property/ bias-disable;
		bias-pull-up;
	};
};

&pinctrl {
	qsmp_ethernet0_rgmii_pins: qsmp-ethernet0-rgmii-pins {
		pins1 {
			pinmux = <
				  STM32_PINMUX('G', 4, AF11) /* ETH_RGMII_GTX_CLK */
				  STM32_PINMUX('G', 13, AF11) /* ETH_RGMII_TXD0 */
				  STM32_PINMUX('G', 14, AF11) /* ETH_RGMII_TXD1 */
				  STM32_PINMUX('C', 2, AF11) /* ETH_RGMII_TXD2 */
				  STM32_PINMUX('B', 8, AF11) /* ETH_RGMII_TXD3 */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};

		pins2 {
			pinmux = <
				  STM32_PINMUX('B', 11, AF11) /* ETH_RGMII_TX_CTL */
				  STM32_PINMUX('A', 2, AF11) /* ETH_MDIO */
				  STM32_PINMUX('C', 1, AF11) /* ETH_MDC */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};

		pins3 {
			/* Micrel KSZ9131 strap pins */
			pinmux = <
				  STM32_PINMUX('A', 7, AF11) /* RX_CTL | CLK125_EN */
				  STM32_PINMUX('C', 5, AF11) /* RXD1 | MODE1 */
				  STM32_PINMUX('B', 0, AF11) /* RXD2 | MODE2 */
				  STM32_PINMUX('H', 7, AF11) /* RXD3 | MODE3 */
				  STM32_PINMUX('A', 1, AF11) /* RX_CLK | PHYAD2 */
			>;
			bias-pull-up;
		};

		pins4 {
			pinmux = <
				  STM32_PINMUX('G', 5, AF11) /* CLK125 | LED_MODE */
				  STM32_PINMUX('C', 4, AF11) /* RXD0 | MODE0 */
			>;
			bias-pull-down;
		};

		pins5 {
			pinmux = <
				  STM32_PINMUX('G', 5, AF11) /* CLK125 | LED_MODE */
			>;
			bias-pull-up;
		};
	};

	qsmp_ethernet0_rgmii_sleep_pins: qsmp-rgmii-sleep-pins {
		pins1 {
			pinmux = <
				  STM32_PINMUX('G', 5, ANALOG) /* ETH_RGMII_CLK125 */
				  STM32_PINMUX('G', 4, ANALOG) /* ETH_RGMII_GTX_CLK */
				  STM32_PINMUX('G', 13, ANALOG) /* ETH_RGMII_TXD0 */
				  STM32_PINMUX('G', 14, ANALOG) /* ETH_RGMII_TXD1 */
				  STM32_PINMUX('C', 2, ANALOG) /* ETH_RGMII_TXD2 */
				  STM32_PINMUX('B', 8, ANALOG) /* ETH_RGMII_TXD3 */
				  STM32_PINMUX('B', 11, ANALOG) /* ETH_RGMII_TX_CTL */
				  STM32_PINMUX('A', 2, ANALOG) /* ETH_MDIO */
				  STM32_PINMUX('C', 1, ANALOG) /* ETH_MDC */
				  STM32_PINMUX('C', 4, ANALOG) /* ETH_RGMII_RXD0 */
				  STM32_PINMUX('C', 5, ANALOG) /* ETH_RGMII_RXD1 */
				  STM32_PINMUX('B', 0, ANALOG) /* ETH_RGMII_RXD2 */
				  STM32_PINMUX('H', 7, ANALOG) /* ETH_RGMII_RXD3 */
				  STM32_PINMUX('A', 1, ANALOG) /* ETH_RGMII_RX_CLK */
				  STM32_PINMUX('A', 7, ANALOG) /* ETH_RGMII_RX_CTL */
			>;
		};
	};

	qsmp_ltdc_pins: qsmp-ltdc-pins {
		pins {
			pinmux = <
				  STM32_PINMUX('G',  7, AF14) /* LCD_CLK */
				  STM32_PINMUX('I', 10, AF14) /* LCD_HSYNC */
				  STM32_PINMUX('I',  9, AF14) /* LCD_VSYNC */
				  STM32_PINMUX('E', 13, AF14) /* LCD_DE */

				  STM32_PINMUX('H',  2, AF14) /* LCD_R0 */
				  STM32_PINMUX('H',  3, AF14) /* LCD_R1 */
				  STM32_PINMUX('H',  8, AF14) /* LCD_R2 */
				  STM32_PINMUX('H',  9, AF14) /* LCD_R3 */
				  STM32_PINMUX('H', 10, AF14) /* LCD_R4 */
				  STM32_PINMUX('H', 11, AF14) /* LCD_R5 */
				  STM32_PINMUX('H', 12, AF14) /* LCD_R6 */
				  STM32_PINMUX('E', 15, AF14) /* LCD_R7 */
				  STM32_PINMUX('B',  1, AF14) /* LCD_G0 */
				  STM32_PINMUX('E',  6, AF14) /* LCD_G1 */
				  STM32_PINMUX('H', 13, AF14) /* LCD_G2 */
				  STM32_PINMUX('H', 14, AF14) /* LCD_G3 */
				  STM32_PINMUX('H', 15, AF14) /* LCD_G4 */
				  STM32_PINMUX('I',  0, AF14) /* LCD_G5 */
				  STM32_PINMUX('I',  1, AF14) /* LCD_G6 */
				  STM32_PINMUX('I',  2, AF14) /* LCD_G7 */
				  STM32_PINMUX('E',  4, AF14) /* LCD_B0 */
				  STM32_PINMUX('G', 12, AF14) /* LCD_B1 */
				  STM32_PINMUX('G', 10, AF14) /* LCD_B2 */
				  STM32_PINMUX('D', 10, AF14) /* LCD_B3 */
				  STM32_PINMUX('I',  4, AF14) /* LCD_B4 */
				  STM32_PINMUX('I',  5, AF14) /* LCD_B5 */
				  STM32_PINMUX('I',  6, AF14) /* LCD_B6 */
				  STM32_PINMUX('D',  8, AF14) /* LCD_B7 */
			>;
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	qsmp_ltdc_sleep_pins: qsmp-ltdc-sleep-pins {
		pins {
			pinmux = <
				  STM32_PINMUX('G',  7, ANALOG) /* LCD_CLK */
				  STM32_PINMUX('I', 10, ANALOG) /* LCD_HSYNC */
				  STM32_PINMUX('I',  9, ANALOG) /* LCD_VSYNC */
				  STM32_PINMUX('E', 13, ANALOG) /* LCD_DE */

				  STM32_PINMUX('H',  2, ANALOG) /* LCD_R0 */
				  STM32_PINMUX('H',  3, ANALOG) /* LCD_R1 */
				  STM32_PINMUX('H',  8, ANALOG) /* LCD_R2 */
				  STM32_PINMUX('H',  9, ANALOG) /* LCD_R3 */
				  STM32_PINMUX('H', 10, ANALOG) /* LCD_R4 */
				  STM32_PINMUX('H', 11, ANALOG) /* LCD_R5 */
				  STM32_PINMUX('H', 12, ANALOG) /* LCD_R6 */
				  STM32_PINMUX('E', 15, ANALOG) /* LCD_R7 */
				  STM32_PINMUX('B',  1, ANALOG) /* LCD_G0 */
				  STM32_PINMUX('E',  6, ANALOG) /* LCD_G1 */
				  STM32_PINMUX('H', 13, ANALOG) /* LCD_G2 */
				  STM32_PINMUX('H', 14, ANALOG) /* LCD_G3 */
				  STM32_PINMUX('H', 15, ANALOG) /* LCD_G4 */
				  STM32_PINMUX('I',  0, ANALOG) /* LCD_G5 */
				  STM32_PINMUX('I',  1, ANALOG) /* LCD_G6 */
				  STM32_PINMUX('I',  2, ANALOG) /* LCD_G7 */
				  STM32_PINMUX('E',  4, ANALOG) /* LCD_B0 */
				  STM32_PINMUX('G', 12, ANALOG) /* LCD_B1 */
				  STM32_PINMUX('G', 10, ANALOG) /* LCD_B2 */
				  STM32_PINMUX('D', 10, ANALOG) /* LCD_B3 */
				  STM32_PINMUX('I',  4, ANALOG) /* LCD_B4 */
				  STM32_PINMUX('I',  5, ANALOG) /* LCD_B5 */
				  STM32_PINMUX('I',  6, ANALOG) /* LCD_B6 */
				  STM32_PINMUX('D',  8, ANALOG) /* LCD_B7 */
			>;
		};
	};

	qsmp_pwm2_pins: qsmp-pwm2-pins {
		pins {
			pinmux = <STM32_PINMUX('A', 15, AF1)>; /* TIM2_CH1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	qsmp_pwm2_sleep_pins: qsmp-pwm2-sleep-pins {
		pins {
			pinmux = <STM32_PINMUX('A', 15, ANALOG)>; /* TIM2_CH1 */
		};
	};
};
