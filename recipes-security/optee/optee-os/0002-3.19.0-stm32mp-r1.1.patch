From 16327e71be8e3da382b902e08349165e59565843 Mon Sep 17 00:00:00 2001
From: Lionel VITTE <lionel.vitte@st.com>
Date: Fri, 11 Aug 2023 16:25:49 +0200
Subject: [PATCH] 3.19.0-stm32mp-r1.1-rc2

---
 core/arch/arm/dts/stm32mp131.dtsi             | 12 +++
 core/arch/arm/dts/stm32mp135f-dk.dts          |  8 ++
 core/arch/arm/dts/stm32mp15xx-dkx.dtsi        |  2 +-
 core/arch/arm/dts/stm32mp15xxab-pinctrl.dtsi  | 57 +++++++++++
 core/arch/arm/dts/stm32mp15xxad-pinctrl.dtsi  | 57 +++++++++++
 .../arm/include/kernel/thread_private_arch.h  |  2 +
 core/arch/arm/kernel/stmm_sp.c                | 16 ++-
 core/arch/arm/kernel/thread_a32.S             | 18 ++++
 core/arch/arm/plat-stm32mp1/conf.mk           | 29 +-----
 .../plat-stm32mp1/drivers/stm32mp1_calib.c    | 13 ++-
 core/arch/arm/plat-stm32mp1/main.c            |  6 +-
 core/arch/arm/plat-stm32mp1/pm/context.c      |  4 +-
 core/arch/arm/plat-stm32mp1/pm/low_power.c    | 24 +++--
 core/drivers/clk/clk-stm32mp15.c              |  4 +
 core/drivers/regulator/stm32_regulator_gpio.c |  4 +
 .../regulator/stm32mp1_regulator_iod.c        |  4 +-
 core/drivers/stm32_rtc.c                      | 98 +++++++++++++++----
 core/include/drivers/stm32_rtc.h              | 17 +++-
 .../dt-bindings/clock/stm32mp13-clksrc.h      |  8 +-
 scripts/render_font.py                        | 39 +++++---
 20 files changed, 329 insertions(+), 93 deletions(-)
 create mode 100644 core/arch/arm/dts/stm32mp15xxab-pinctrl.dtsi
 create mode 100644 core/arch/arm/dts/stm32mp15xxad-pinctrl.dtsi

diff --git a/core/arch/arm/dts/stm32mp131.dtsi b/core/arch/arm/dts/stm32mp131.dtsi
index bed960132..8669bdc64 100644
--- a/core/arch/arm/dts/stm32mp131.dtsi
+++ b/core/arch/arm/dts/stm32mp131.dtsi
@@ -132,6 +132,18 @@
 		};
 	};
 
+	sdmmc1_io: sdmmc1_io {
+		compatible = "st,stm32mp13-iod";
+		regulator-name = "sdmmc1_io";
+		regulator-always-on;
+	};
+
+	sdmmc2_io: sdmmc2_io {
+		compatible = "st,stm32mp13-iod";
+		regulator-name = "sdmmc2_io";
+		regulator-always-on;
+	};
+
 	soc {
 		compatible = "simple-bus";
 		#address-cells = <1>;
diff --git a/core/arch/arm/dts/stm32mp135f-dk.dts b/core/arch/arm/dts/stm32mp135f-dk.dts
index 428ce7e2b..bf6157836 100644
--- a/core/arch/arm/dts/stm32mp135f-dk.dts
+++ b/core/arch/arm/dts/stm32mp135f-dk.dts
@@ -619,6 +619,14 @@
 	};
 };
 
+&sdmmc1_io {
+	vddsd1-supply = <&vdd>;
+};
+
+&sdmmc2_io {
+	vddsd2-supply = <&vdd>;
+};
+
 &tamp {
 	status = "okay";
 	st,tamp_passive_nb_sample = <4>;
diff --git a/core/arch/arm/dts/stm32mp15xx-dkx.dtsi b/core/arch/arm/dts/stm32mp15xx-dkx.dtsi
index 786fcfe8a..4418da7b7 100644
--- a/core/arch/arm/dts/stm32mp15xx-dkx.dtsi
+++ b/core/arch/arm/dts/stm32mp15xx-dkx.dtsi
@@ -564,7 +564,7 @@
 		CLK_SAI2_PLL3Q
 		CLK_SAI3_PLL3Q
 		CLK_SAI4_PLL3Q
-		CLK_RNG1_LSI
+		CLK_RNG1_CSI
 		CLK_RNG2_LSI
 		CLK_LPTIM1_PCLK1
 		CLK_LPTIM23_PCLK3
diff --git a/core/arch/arm/dts/stm32mp15xxab-pinctrl.dtsi b/core/arch/arm/dts/stm32mp15xxab-pinctrl.dtsi
new file mode 100644
index 000000000..f158232ba
--- /dev/null
+++ b/core/arch/arm/dts/stm32mp15xxab-pinctrl.dtsi
@@ -0,0 +1,57 @@
+// SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-3-Clause)
+/*
+ * Copyright (C) STMicroelectronics 2019 - All Rights Reserved
+ * Author: Alexandre Torgue <alexandre.torgue@st.com> for STMicroelectronics.
+ */
+
+&pinctrl {
+	st,package = <STM32MP_PKG_AB>;
+
+	gpioa: gpio@50002000 {
+		status = "okay";
+		ngpios = <16>;
+		gpio-ranges = <&pinctrl 0 0 16>;
+	};
+
+	gpiob: gpio@50003000 {
+		status = "okay";
+		ngpios = <16>;
+		gpio-ranges = <&pinctrl 0 16 16>;
+	};
+
+	gpioc: gpio@50004000 {
+		status = "okay";
+		ngpios = <16>;
+		gpio-ranges = <&pinctrl 0 32 16>;
+	};
+
+	gpiod: gpio@50005000 {
+		status = "okay";
+		ngpios = <16>;
+		gpio-ranges = <&pinctrl 0 48 16>;
+	};
+
+	gpioe: gpio@50006000 {
+		status = "okay";
+		ngpios = <16>;
+		gpio-ranges = <&pinctrl 0 64 16>;
+	};
+
+	gpiof: gpio@50007000 {
+		status = "okay";
+		ngpios = <6>;
+		gpio-ranges = <&pinctrl 6 86 6>;
+	};
+
+	gpiog: gpio@50008000 {
+		status = "okay";
+		ngpios = <10>;
+		gpio-ranges = <&pinctrl 6 102 10>;
+	};
+
+	gpioh: gpio@50009000 {
+		status = "okay";
+		ngpios = <2>;
+		gpio-ranges = <&pinctrl 0 112 2>;
+	};
+};
diff --git a/core/arch/arm/dts/stm32mp15xxad-pinctrl.dtsi b/core/arch/arm/dts/stm32mp15xxad-pinctrl.dtsi
new file mode 100644
index 000000000..6e5400115
--- /dev/null
+++ b/core/arch/arm/dts/stm32mp15xxad-pinctrl.dtsi
@@ -0,0 +1,57 @@
+// SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-3-Clause)
+/*
+ * Copyright (C) STMicroelectronics 2019 - All Rights Reserved
+ * Author: Alexandre Torgue <alexandre.torgue@st.com> for STMicroelectronics.
+ */
+
+&pinctrl {
+	st,package = <STM32MP_PKG_AD>;
+
+	gpioa: gpio@50002000 {
+		status = "okay";
+		ngpios = <16>;
+		gpio-ranges = <&pinctrl 0 0 16>;
+	};
+
+	gpiob: gpio@50003000 {
+		status = "okay";
+		ngpios = <16>;
+		gpio-ranges = <&pinctrl 0 16 16>;
+	};
+
+	gpioc: gpio@50004000 {
+		status = "okay";
+		ngpios = <16>;
+		gpio-ranges = <&pinctrl 0 32 16>;
+	};
+
+	gpiod: gpio@50005000 {
+		status = "okay";
+		ngpios = <16>;
+		gpio-ranges = <&pinctrl 0 48 16>;
+	};
+
+	gpioe: gpio@50006000 {
+		status = "okay";
+		ngpios = <16>;
+		gpio-ranges = <&pinctrl 0 64 16>;
+	};
+
+	gpiof: gpio@50007000 {
+		status = "okay";
+		ngpios = <6>;
+		gpio-ranges = <&pinctrl 6 86 6>;
+	};
+
+	gpiog: gpio@50008000 {
+		status = "okay";
+		ngpios = <10>;
+		gpio-ranges = <&pinctrl 6 102 10>;
+	};
+
+	gpioh: gpio@50009000 {
+		status = "okay";
+		ngpios = <2>;
+		gpio-ranges = <&pinctrl 0 112 2>;
+	};
+};
diff --git a/core/arch/arm/include/kernel/thread_private_arch.h b/core/arch/arm/include/kernel/thread_private_arch.h
index aa9179f11..ac7ef9cb3 100644
--- a/core/arch/arm/include/kernel/thread_private_arch.h
+++ b/core/arch/arm/include/kernel/thread_private_arch.h
@@ -181,6 +181,8 @@ void thread_set_fiq_sp(vaddr_t sp);
 
 /* Read usr_sp banked CPU register */
 uint32_t thread_get_usr_sp(void);
+uint32_t thread_get_usr_lr(void);
+void thread_set_usr_lr(uint32_t usr_lr);
 #endif /*ARM32*/
 
 void thread_alloc_and_run(uint32_t a0, uint32_t a1, uint32_t a2, uint32_t a3,
diff --git a/core/arch/arm/kernel/stmm_sp.c b/core/arch/arm/kernel/stmm_sp.c
index ab03d3da4..6b8050a51 100644
--- a/core/arch/arm/kernel/stmm_sp.c
+++ b/core/arch/arm/kernel/stmm_sp.c
@@ -11,6 +11,7 @@
 #include <kernel/stmm_sp.h>
 #include <kernel/thread_private.h>
 #include <kernel/user_mode_ctx.h>
+#include <mempool.h>
 #include <mm/fobj.h>
 #include <mm/mobj.h>
 #include <mm/vm.h>
@@ -111,7 +112,18 @@ static TEE_Result stmm_enter_user_mode(struct stmm_ctx *spc)
 	exceptions = thread_mask_exceptions(THREAD_EXCP_ALL);
 	cntkctl = read_cntkctl();
 	write_cntkctl(cntkctl | CNTKCTL_PL0PCTEN);
+
+#ifdef ARM32
+	/* Handle usr_lr in place of __thread_enter_user_mode() */
+	thread_set_usr_lr(spc->regs.usr_lr);
+#endif
+
 	__thread_enter_user_mode(&spc->regs, &panicked, &panic_code);
+
+#ifdef ARM32
+	spc->regs.usr_lr = thread_get_usr_lr();
+#endif
+
 	write_cntkctl(cntkctl);
 	thread_unmask_exceptions(exceptions);
 
@@ -184,12 +196,12 @@ static TEE_Result alloc_and_map_sp_fobj(struct stmm_ctx *spc, size_t sz,
 static void *zalloc(void *opaque __unused, unsigned int items,
 		    unsigned int size)
 {
-	return malloc(items * size);
+	return mempool_alloc(mempool_default, items * size);
 }
 
 static void zfree(void *opaque __unused, void *address)
 {
-	free(address);
+	mempool_free(mempool_default, address);
 }
 
 static void uncompress_image(void *dst, size_t dst_size, void *src,
diff --git a/core/arch/arm/kernel/thread_a32.S b/core/arch/arm/kernel/thread_a32.S
index fff34abf5..1fc04a4c1 100644
--- a/core/arch/arm/kernel/thread_a32.S
+++ b/core/arch/arm/kernel/thread_a32.S
@@ -71,6 +71,24 @@ FUNC thread_get_usr_sp , :
 	bx	lr
 END_FUNC thread_get_usr_sp
 
+FUNC thread_get_usr_lr , :
+	mrs	r1, cpsr
+	cpsid	aif
+	cps	#CPSR_MODE_SYS
+	mov	r0, lr
+	msr	cpsr, r1
+	bx	lr
+END_FUNC thread_get_usr_lr
+
+FUNC thread_set_usr_lr , :
+	mrs	r1, cpsr
+	cpsid	aif
+	cps	#CPSR_MODE_SYS
+	mov	lr, r0
+	msr	cpsr, r1
+	bx	lr
+END_FUNC thread_set_usr_lr
+
 /* void thread_resume(struct thread_ctx_regs *regs) */
 FUNC thread_resume , :
 UNWIND(	.cantunwind)
diff --git a/core/arch/arm/plat-stm32mp1/conf.mk b/core/arch/arm/plat-stm32mp1/conf.mk
index 381569e59..ef6fc368e 100644
--- a/core/arch/arm/plat-stm32mp1/conf.mk
+++ b/core/arch/arm/plat-stm32mp1/conf.mk
@@ -69,6 +69,7 @@ $(error Invalid platform flavor $(PLATFORM_FLAVOR))
 endif
 CFG_EMBED_DTB_SOURCE_FILE ?= $(flavor_dts_file-$(PLATFORM_FLAVOR))
 endif
+CFG_EMBED_DTB_SOURCE_FILE ?= stm32mp157c-dk2.dts
 
 ifneq ($(filter $(CFG_EMBED_DTB_SOURCE_FILE),$(flavorlist-no_cryp)),)
 $(call force,CFG_STM32_CRYP,n)
@@ -112,6 +113,7 @@ include core/arch/arm/cpu/cortex-a7.mk
 
 $(call force,CFG_ARM_GIC_PM,y)
 $(call force,CFG_DRIVERS_CLK,y)
+$(call force,CFG_DRIVERS_CLK_DT,y)
 $(call force,CFG_GIC,y)
 $(call force,CFG_INIT_CNTVOFF,y)
 $(call force,CFG_PM,y)
@@ -206,33 +208,6 @@ CFG_EARLY_TA_COMPRESS ?= n
 # Embed public part of this key in OP-TEE OS
 CFG_RPROC_SIGN_KEY ?= keys/default_rproc.pem
 
-ifeq ($(CFG_EMBED_DTB_SOURCE_FILE),)
-# Some drivers mandate DT support
-$(call force,CFG_DRIVERS_CLK_DT,n)
-$(call force,CFG_DRIVERS_RSTCTRL,n)
-$(call force,CFG_REGULATOR_FIXED,n)
-$(call force,CFG_STM32_CRYP,n)
-$(call force,CFG_STM32_GPIO,n)
-$(call force,CFG_STM32_HASH,n)
-$(call force,CFG_STM32_HUK_FROM_DT,n)
-$(call force,CFG_STM32_I2C,n)
-$(call force,CFG_STM32_IWDG,n)
-$(call force,CFG_STM32_LPTIMER,n)
-$(call force,CFG_STM32_PKA,n)
-$(call force,CFG_STM32_REGULATOR_GPIO,n)
-$(call force,CFG_STM32_RTC,n)
-$(call force,CFG_STM32_SAES,n)
-$(call force,CFG_STM32_TIM,n)
-$(call force,CFG_STM32_VREFBUF,y)
-$(call force,CFG_STM32_TAMP,n)
-$(call force,CFG_STM32MP1_REGULATOR_IOD,n)
-$(call force,CFG_STM32MP1_SCMI_SIP,n)
-$(call force,CFG_SCMI_PTA,n)
-$(call force,CFG_STPMIC1,n)
-else
-$(call force,CFG_DRIVERS_CLK_DT,y)
-endif
-
 ifneq ($(filter $(CFG_EMBED_DTB_SOURCE_FILE),$(flavorlist-512M)),)
 CFG_DRAM_SIZE    ?= 0x20000000
 endif
diff --git a/core/arch/arm/plat-stm32mp1/drivers/stm32mp1_calib.c b/core/arch/arm/plat-stm32mp1/drivers/stm32mp1_calib.c
index bf13a8660..8a52d6095 100644
--- a/core/arch/arm/plat-stm32mp1/drivers/stm32mp1_calib.c
+++ b/core/arch/arm/plat-stm32mp1/drivers/stm32mp1_calib.c
@@ -292,8 +292,11 @@ static void osc_calibration(struct stm32mp1_clk_cal *clk_cal)
 			trim = new_trim;
 		}
 
-		if (timeout_elapsed(timeout_ref))
+		if (timeout_elapsed(timeout_ref)) {
+			EMSG("%s Timeout: %lu , trim %i\n",
+			     clk_cal->name, freq, trim);
 			break;
+		}
 
 	} while (conv == min_conv);
 
@@ -301,10 +304,10 @@ static void osc_calibration(struct stm32mp1_clk_cal *clk_cal)
 
 	clk_cal->set_trim(trim, clk_cal->cal_ref);
 	freq = get_freq(clk_cal);
-	if (freq < min || freq > max) {
-		EMSG("Calibration failed: Freq %lu , trim %i\n", freq, trim);
-		panic();
-	}
+	if (freq < min || freq > max)
+		EMSG("%s Freq out of range: %lu , trim %i\n", clk_cal->name,
+		     freq, trim);
+
 }
 
 static void save_trim(struct stm32mp1_clk_cal *clk_cal,
diff --git a/core/arch/arm/plat-stm32mp1/main.c b/core/arch/arm/plat-stm32mp1/main.c
index 208612819..edb9a2cc1 100644
--- a/core/arch/arm/plat-stm32mp1/main.c
+++ b/core/arch/arm/plat-stm32mp1/main.c
@@ -445,7 +445,6 @@ void __noreturn plat_panic(void)
 		cpu_idle();
 }
 
-#ifdef CFG_TEE_CORE_DEBUG
 static TEE_Result init_debug(void)
 {
 	TEE_Result res = TEE_SUCCESS;
@@ -458,10 +457,14 @@ static TEE_Result init_debug(void)
 		return res;
 
 	if (state != BSEC_STATE_SEC_CLOSED && conf) {
+#ifdef CFG_TEE_CORE_DEBUG
 		if (IS_ENABLED(CFG_WARN_INSECURE))
 			IMSG("WARNING: All debug access are allowed");
 
 		res = stm32_bsec_write_debug_conf(conf | BSEC_DEBUG_ALL);
+#else
+		res = stm32_bsec_write_debug_conf(conf | BSEC_DBGSWGEN);
+#endif
 
 		/* Enable DBG as used to access coprocessor debug registers */
 		clk_enable(dbg_clk);
@@ -470,7 +473,6 @@ static TEE_Result init_debug(void)
 	return res;
 }
 early_init_late(init_debug);
-#endif
 
 static int get_chip_dev_id(uint32_t *dev_id)
 {
diff --git a/core/arch/arm/plat-stm32mp1/pm/context.c b/core/arch/arm/plat-stm32mp1/pm/context.c
index 7fe55180b..51ed4d87c 100644
--- a/core/arch/arm/plat-stm32mp1/pm/context.c
+++ b/core/arch/arm/plat-stm32mp1/pm/context.c
@@ -229,8 +229,8 @@ static void restore_time(void)
 	struct retram_resume_ctx __maybe_unused *ctx = get_retram_resume_ctx();
 
 	stm32_rtc_get_calendar(&current_calendar);
-	stdby_time_in_ms = stm32_rtc_diff_calendar(&current_calendar,
-						   &plat_ctx.rtc);
+	stdby_time_in_ms = stm32_rtc_diff_calendar_ms(&current_calendar,
+						      &plat_ctx.rtc);
 
 	cnt = ((uint64_t)plat_ctx.stgen_cnt_h << 32) | plat_ctx.stgen_cnt_l;
 	cnt += (stdby_time_in_ms * io_read32(stgen + CNTFID_OFFSET)) / 1000U;
diff --git a/core/arch/arm/plat-stm32mp1/pm/low_power.c b/core/arch/arm/plat-stm32mp1/pm/low_power.c
index 6cc3cb7c7..46cc7c76c 100644
--- a/core/arch/arm/plat-stm32mp1/pm/low_power.c
+++ b/core/arch/arm/plat-stm32mp1/pm/low_power.c
@@ -280,22 +280,14 @@ void stm32_enter_cstop(uint32_t mode)
 #endif
 
 	if (mode == STM32_PM_CSTOP_ALLOW_STANDBY_DDR_SR) {
-		uint64_t to = 0;
-
 		/* set POPL to 20ms */
 		io_clrsetbits32(pwr_base + PWR_CR3_OFF, PWR_CR3_POPL_MASK,
 				20U << PWR_CR3_POPL_SHIFT);
 
-		/* Keep backup RAM content in standby */
-		io_setbits32(pwr_base + PWR_CR2_OFF, PWR_CR2_BREN);
-
-		to = timeout_init_us(TIMEOUT_US_10MS);
-		while (!(io_read32(pwr_base + PWR_CR2_OFF) & PWR_CR2_BRRDY))
-			if (timeout_elapsed(to))
-				panic();
-
 #ifdef CFG_STM32MP15
 		if (stm32mp1_is_retram_during_standby()) {
+			uint64_t to = 0;
+
 			/* Keep retention in standby */
 			to = timeout_init_us(TIMEOUT_US_10MS);
 			io_setbits32(pwr_base + PWR_CR2_OFF, PWR_CR2_RREN);
@@ -340,9 +332,6 @@ void stm32_exit_cstop(void)
 	dsb();
 	isb();
 
-	/* Disable retention and backup RAM content after stop */
-	io_clrbits32(stm32_pwr_base() + PWR_CR2_OFF, PWR_CR2_BREN);
-
 #ifndef CFG_STM32MP13
 	/* Disable retention and backup RAM content after stop */
 	io_clrbits32(stm32_pwr_base() + PWR_CR2_OFF, PWR_CR2_RREN);
@@ -459,6 +448,7 @@ static TEE_Result init_low_power(void)
 {
 	vaddr_t pwr_base __maybe_unused = stm32_pwr_base();
 	vaddr_t rcc_base = stm32_rcc_base();
+	uint64_t to = 0;
 
 	itr_add(&rcc_wakeup_handler);
 	itr_enable(rcc_wakeup_handler.it);
@@ -478,6 +468,14 @@ static TEE_Result init_low_power(void)
 		     RCC_MP_SREQSETR_STPREQ_P0 | RCC_MP_SREQSETR_STPREQ_P1);
 #endif
 
+	/* Keep backup RAM content in standby */
+	io_setbits32(pwr_base + PWR_CR2_OFF, PWR_CR2_BREN);
+
+	to = timeout_init_us(TIMEOUT_US_10MS);
+	while (!(io_read32(pwr_base + PWR_CR2_OFF) & PWR_CR2_BRRDY))
+		if (timeout_elapsed(to))
+			panic();
+
 	return TEE_SUCCESS;
 }
 driver_init_late(init_low_power);
diff --git a/core/drivers/clk/clk-stm32mp15.c b/core/drivers/clk/clk-stm32mp15.c
index 4d11503b9..7c0d6a549 100644
--- a/core/drivers/clk/clk-stm32mp15.c
+++ b/core/drivers/clk/clk-stm32mp15.c
@@ -2158,9 +2158,13 @@ static const struct gate_cfg gates_mp15[GATE_NB] = {
 	GATE_CFG(GATE_APB4DIVRDY,	RCC_APB4DIVR,		31,	0),
 	GATE_CFG(GATE_APB5DIVRDY,	RCC_APB5DIVR,		31,	0),
 	GATE_CFG(GATE_PLL1,		RCC_PLL1CR,		0,	0),
+	GATE_CFG(GATE_PLL1_RDY,		RCC_PLL1CR,		1,	0),
 	GATE_CFG(GATE_PLL2,		RCC_PLL2CR,		0,	0),
+	GATE_CFG(GATE_PLL2_RDY,		RCC_PLL2CR,		1,	0),
 	GATE_CFG(GATE_PLL3,		RCC_PLL3CR,		0,	0),
+	GATE_CFG(GATE_PLL3_RDY,		RCC_PLL3CR,		1,	0),
 	GATE_CFG(GATE_PLL4,		RCC_PLL4CR,		0,	0),
+	GATE_CFG(GATE_PLL4_RDY,		RCC_PLL4CR,		1,	0),
 	GATE_CFG(GATE_MCO1,		RCC_MCO1CFGR,		12,	0),
 	GATE_CFG(GATE_MCO2,		RCC_MCO2CFGR,		12,	0),
 };
diff --git a/core/drivers/regulator/stm32_regulator_gpio.c b/core/drivers/regulator/stm32_regulator_gpio.c
index 68ce9d8f3..80f70d709 100644
--- a/core/drivers/regulator/stm32_regulator_gpio.c
+++ b/core/drivers/regulator/stm32_regulator_gpio.c
@@ -244,6 +244,10 @@ static TEE_Result gpio_regulator_probe(const void *fdt, int node,
 		gr->ops.get_state = gpio_get_state;
 	}
 
+	res = stm32_pinctrl_set_secure_cfg(list, true /*secure*/);
+	if (res)
+		goto err;
+
 	res = regulator_register(&gr->desc, node);
 	if (res) {
 		EMSG("regulator_register(%s) failed with %#"PRIx32,
diff --git a/core/drivers/regulator/stm32mp1_regulator_iod.c b/core/drivers/regulator/stm32mp1_regulator_iod.c
index 2766c5734..cbb022ddb 100644
--- a/core/drivers/regulator/stm32mp1_regulator_iod.c
+++ b/core/drivers/regulator/stm32mp1_regulator_iod.c
@@ -146,9 +146,11 @@ static TEE_Result iod_set_voltage(const struct regul_desc *desc, uint16_t mv)
 
 	/* Forward set voltage request to the power supply */
 	res = regulator_set_voltage(iod->supply, mv);
-	if (res) {
+	if (res && res != TEE_ERROR_NOT_IMPLEMENTED) {
 		EMSG("regulator %s set voltage failed", desc->node_name);
 		return res;
+	} else {
+		res = TEE_SUCCESS;
 	}
 
 	if (mv < IO_VOLTAGE_THRESHOLD)
diff --git a/core/drivers/stm32_rtc.c b/core/drivers/stm32_rtc.c
index f41151168..9cdd1e274 100644
--- a/core/drivers/stm32_rtc.c
+++ b/core/drivers/stm32_rtc.c
@@ -114,6 +114,7 @@
 #define RTC_FLAGS_SECURE		BIT(1)
 
 #define TIMEOUT_US_RTC_SHADOW		U(10000)
+#define MS_PER_SEC			U(1000)
 
 struct rtc_compat {
 	bool has_seccfgr;
@@ -246,27 +247,54 @@ void stm32_rtc_get_calendar(struct stm32_rtc_calendar *calendar)
 	clk_disable(rtc_dev.pclk);
 }
 
-/* Return difference in milliseconds on second fraction */
-static uint32_t stm32_rtc_get_second_fraction(struct stm32_rtc_calendar *cal)
+/*
+ * Get the subsecond value.
+ *
+ * Subsecond is a counter that grows from 0 to stm32_rtc_get_subsecond_scale()
+ * every second.
+ */
+static uint32_t stm32_rtc_get_subsecond(struct stm32_rtc_calendar *cal)
 {
 	uint32_t prediv_s = io_read32(get_base() + RTC_PRER) &
 			    RTC_PRER_PREDIV_S_MASK;
 	uint32_t ss = cal->ssr & RTC_SSR_SS_MASK;
 
-	return ((prediv_s - ss) * 1000) / (prediv_s + 1);
+	return prediv_s - ss;
 }
 
-/* Return absolute difference in milliseconds on second fraction */
-static signed long long stm32_rtc_diff_frac(struct stm32_rtc_calendar *cur,
-					    struct stm32_rtc_calendar *ref)
+/*
+ * Get the subsecond scale.
+ *
+ * Number of subseconds in a second is linked to RTC PREDIV_S value.
+ * The more PREDIV_S will be high, the more subseconds will be precise.
+ */
+static uint32_t stm32_rtc_get_subsecond_scale(void)
 {
-	return (signed long long)stm32_rtc_get_second_fraction(cur) -
-	       (signed long long)stm32_rtc_get_second_fraction(ref);
+	return (io_read32(get_base() + RTC_PRER) & RTC_PRER_PREDIV_S_MASK) + 1;
+}
+
+/* Return relative difference of ticks count between two rtc calendar */
+static signed long long
+stm32_rtc_diff_subs_tick(struct stm32_rtc_calendar *cur,
+			 struct stm32_rtc_calendar *ref,
+			 unsigned long tick_rate)
+{
+	return (((signed long long)stm32_rtc_get_subsecond(cur) -
+		 (signed long long)stm32_rtc_get_subsecond(ref)) *
+		(signed long long)tick_rate) /
+		stm32_rtc_get_subsecond_scale();
+}
+
+/* Return relative difference in milliseconds on subsecond */
+static signed long long stm32_rtc_diff_subs_ms(struct stm32_rtc_calendar *cur,
+					       struct stm32_rtc_calendar *ref)
+{
+	return stm32_rtc_diff_subs_tick(cur, ref, MS_PER_SEC);
 }
 
 /* Return absolute difference in milliseconds on seconds-in-day fraction */
-static signed long long stm32_rtc_diff_time(struct stm32_rtc_time *current,
-					    struct stm32_rtc_time *ref)
+static signed long long stm32_rtc_diff_time_ms(struct stm32_rtc_time *current,
+					       struct stm32_rtc_time *ref)
 {
 	signed long long curr_s = 0;
 	signed long long ref_s = 0;
@@ -289,8 +317,8 @@ static bool stm32_is_a_leap_year(uint32_t year)
 }
 
 /* Return absolute difference in milliseconds on day-in-year fraction */
-static signed long long stm32_rtc_diff_date(struct stm32_rtc_time *current,
-					    struct stm32_rtc_time *ref)
+static signed long long stm32_rtc_diff_date_ms(struct stm32_rtc_time *current,
+					       struct stm32_rtc_time *ref)
 {
 	uint32_t diff_in_days = 0;
 	uint32_t m = 0;
@@ -353,8 +381,12 @@ static signed long long stm32_rtc_diff_date(struct stm32_rtc_time *current,
 	return (24 * 60 * 60 * 1000) * (signed long long)diff_in_days;
 }
 
-unsigned long long stm32_rtc_diff_calendar(struct stm32_rtc_calendar *cur,
-					   struct stm32_rtc_calendar *ref)
+/*
+ * Return time diff in milliseconds between current and reference time
+ * System will panic if stm32_rtc_calendar "cur" is older than "ref".
+ */
+unsigned long long stm32_rtc_diff_calendar_ms(struct stm32_rtc_calendar *cur,
+					      struct stm32_rtc_calendar *ref)
 {
 	signed long long diff_in_ms = 0;
 	struct stm32_rtc_time curr_t = { };
@@ -365,13 +397,45 @@ unsigned long long stm32_rtc_diff_calendar(struct stm32_rtc_calendar *cur,
 	stm32_rtc_get_time(cur, &curr_t);
 	stm32_rtc_get_time(ref, &ref_t);
 
-	diff_in_ms += stm32_rtc_diff_frac(cur, ref);
-	diff_in_ms += stm32_rtc_diff_time(&curr_t, &ref_t);
-	diff_in_ms += stm32_rtc_diff_date(&curr_t, &ref_t);
+	diff_in_ms += stm32_rtc_diff_subs_ms(cur, ref);
+	diff_in_ms += stm32_rtc_diff_time_ms(&curr_t, &ref_t);
+	diff_in_ms += stm32_rtc_diff_date_ms(&curr_t, &ref_t);
+
+	if (diff_in_ms < 0)
+		panic("Negative time difference is not allowed");
 
 	return (unsigned long long)diff_in_ms;
 }
 
+/*
+ * Return time diff in tick count between current and reference time
+ * System will panic if stm32_rtc_calendar "cur" is older than "ref".
+ */
+unsigned long long stm32_rtc_diff_calendar_tick(struct stm32_rtc_calendar *cur,
+						struct stm32_rtc_calendar *ref,
+						unsigned long tick_rate)
+{
+	signed long long diff_in_tick = 0;
+	struct stm32_rtc_time curr_t = { };
+	struct stm32_rtc_time ref_t = { };
+
+	stm32_rtc_get_date(cur, &curr_t);
+	stm32_rtc_get_date(ref, &ref_t);
+	stm32_rtc_get_time(cur, &curr_t);
+	stm32_rtc_get_time(ref, &ref_t);
+
+	diff_in_tick += stm32_rtc_diff_subs_tick(cur, ref, tick_rate);
+	diff_in_tick += stm32_rtc_diff_time_ms(&curr_t, &ref_t) *
+			tick_rate / MS_PER_SEC;
+	diff_in_tick += stm32_rtc_diff_date_ms(&curr_t, &ref_t) *
+			tick_rate / MS_PER_SEC;
+
+	if (diff_in_tick < 0)
+		panic("Negative time difference is not allowed");
+
+	return (unsigned long long)diff_in_tick;
+}
+
 void stm32_rtc_get_timestamp(struct stm32_rtc_time *tamp_ts)
 {
 	vaddr_t rtc_base = get_base();
diff --git a/core/include/drivers/stm32_rtc.h b/core/include/drivers/stm32_rtc.h
index e50a8bb1b..fd6d40e7f 100644
--- a/core/include/drivers/stm32_rtc.h
+++ b/core/include/drivers/stm32_rtc.h
@@ -45,9 +45,20 @@ struct stm32_rtc_time {
 /* Get calendar formatted time from RTC device */
 void stm32_rtc_get_calendar(struct stm32_rtc_calendar *calendar);
 
-/* Return time diff in milliseconds between current and reference time */
-unsigned long long stm32_rtc_diff_calendar(struct stm32_rtc_calendar *cur,
-					   struct stm32_rtc_calendar *ref);
+/*
+ * Return time diff in milliseconds between current and reference time
+ * System will panic if stm32_rtc_calendar "cur" is older than "ref".
+ */
+unsigned long long stm32_rtc_diff_calendar_ms(struct stm32_rtc_calendar *cur,
+					      struct stm32_rtc_calendar *ref);
+
+/*
+ * Return time diff in tick count between current and reference time
+ * System will panic if stm32_rtc_calendar "cur" is older than "ref".
+ */
+unsigned long long stm32_rtc_diff_calendar_tick(struct stm32_rtc_calendar *cur,
+						struct stm32_rtc_calendar *ref,
+						unsigned long tick_rate);
 
 /* Enable tamper and secure timestamp access in RTC */
 void stm32_rtc_set_tamper_timestamp(void);
diff --git a/core/include/dt-bindings/clock/stm32mp13-clksrc.h b/core/include/dt-bindings/clock/stm32mp13-clksrc.h
index 19c18335b..43b51b12c 100644
--- a/core/include/dt-bindings/clock/stm32mp13-clksrc.h
+++ b/core/include/dt-bindings/clock/stm32mp13-clksrc.h
@@ -156,10 +156,10 @@
 #define CLK_PLL4_HSE		CLKSRC(MUX_PLL4, 1)
 #define CLK_PLL4_CSI		CLKSRC(MUX_PLL4, 2)
 
-#define CLK_RTC_DISABLED	CLKSRC(RTC, 0)
-#define CLK_RTC_LSE		CLKSRC(RTC, 1)
-#define CLK_RTC_LSI		CLKSRC(RTC, 2)
-#define CLK_RTC_HSE		CLKSRC(RTC, 3)
+#define CLK_RTC_DISABLED	CLKSRC(MUX_RTC, 0)
+#define CLK_RTC_LSE		CLKSRC(MUX_RTC, 1)
+#define CLK_RTC_LSI		CLKSRC(MUX_RTC, 2)
+#define CLK_RTC_HSE		CLKSRC(MUX_RTC, 3)
 
 #define CLK_MCO1_HSI		CLK_SRC(CK_MCO1, 0)
 #define CLK_MCO1_HSE		CLK_SRC(CK_MCO1, 1)
diff --git a/scripts/render_font.py b/scripts/render_font.py
index 479b57c37..7593283a6 100755
--- a/scripts/render_font.py
+++ b/scripts/render_font.py
@@ -8,6 +8,7 @@ from PIL import ImageFont
 from PIL import Image
 import sys
 
+
 def get_args():
     from argparse import ArgumentParser
 
@@ -24,6 +25,7 @@ def get_args():
                         help='Print informational messages')
     return parser.parse_args()
 
+
 def c_hex(bstr):
     s = []
     for n, x in enumerate(bstr):
@@ -39,6 +41,7 @@ def c_hex(bstr):
 
     return "".join(s)
 
+
 header_template = """/*
  * This file is auto generated with
  * {cmd_line}
@@ -67,14 +70,15 @@ font_letter_template = """\t{{ letter_{id}, sizeof(letter_{id}), {width}}},
 """
 
 font_template = """const struct font font_{name} = {{
-        .first = 0x{first:02x},
-        .last = 0x{last:02x},
-	.letters = letters,
-	.height = {height},
-	.max_width = {max_width},
+    .first = 0x{first:02x},
+    .last = 0x{last:02x},
+    .letters = letters,
+    .height = {height},
+    .max_width = {max_width},
 }};
 """
 
+
 def main():
     args = get_args()
 
@@ -92,15 +96,15 @@ def main():
     text_height = font.font.height + 2
 
     for x in letters:
-        letter= chr(x)
+        letter = chr(x)
         (width, height), (offset_x, offset_y) = font.font.getsize(letter)
-        text_width = width + 2 + offset_x;
+        text_width = width + 2 + offset_x
         letter_img = Image.new("1", (text_width, text_height), 0)
         draw = ImageDraw.Draw(letter_img)
-        draw.fontmode="1"
+        draw.fontmode = "1"
         draw.text((0, 0), letter, font=font, fill=1)
-        c_letters[x] = {'img' : letter_img.tobytes(),
-                        'width' : text_width }
+        c_letters[x] = {'img': letter_img.tobytes(),
+                        'width': text_width}
 
     if args.verbose:
         print("Writing " + out_dir + "/" + font_name + ".c")
@@ -109,7 +113,8 @@ def main():
         f.write(header_template.format(cmd_line=' '.join(sys.argv)))
         f.write('#include "font.h"\n\n')
         for x in letters:
-            f.write(letter_template.format(letter=chr(x), id="{:02x}".format(x),
+            f.write(letter_template.format(letter=chr(x),
+                                           id="{:02x}".format(x),
                     c_hex=c_hex(c_letters[x]['img'])))
 
         f.write("static const struct font_letter letters[] = {\n")
@@ -119,17 +124,19 @@ def main():
         f.write("};\n\n")
 
         f.write(font_template.format(name=args.font_name,
-            first=letters[0],
-            last=letters[-1],
-            height=text_height,
-            max_width=max(l['width'] for l in c_letters.values())))
+                first=letters[0],
+                last=letters[-1],
+                height=text_height,
+                max_width=max(i['width'] for i in c_letters.values())))
 
     if args.verbose:
         print("Writing " + out_dir + "/" + font_name + ".h")
 
     with open(out_dir + "/" + font_name + ".h", 'w+') as f:
         f.write(header_template.format(cmd_line=' '.join(sys.argv)))
-        f.write(h_file_template.format(font_name=font_name, FONT_NAME=font_name.upper()))
+        f.write(h_file_template.format(font_name=font_name,
+                                       FONT_NAME=font_name.upper()))
+
 
 if __name__ == "__main__":
     main()
-- 
2.25.1

